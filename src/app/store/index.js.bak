import * as reduxModule from 'redux';
import { applyMiddleware, compose, createStore, combineReducers } from 'redux';
import thunk from 'redux-thunk';
import createReducer from './reducers';

import firebase from 'firebase/app'
import 'firebase/auth'
import {
  firebaseReducer
} from 'react-redux-firebase'



const prodConfig = {
	apiKey: "AIzaSyD-wxmd_OmfUqPwjHEDTGR9x9pBsl0FizI",
    authDomain: "crmnativos-863ab.firebaseapp.com",
    databaseURL: "https://crmnativos-863ab.firebaseio.com",
    projectId: "crmnativos-863ab",
    storageBucket: "crmnativos-863ab.appspot.com",
    messagingSenderId: "466159933820",
    appId: "1:466159933820:web:56f51ae2decc68fcd9ecf9",
    measurementId: "G-6296QH8ZC7"
};



firebase.initializeApp(prodConfig)


const rootReducer = combineReducers({
  firebase: firebaseReducer
  // firestore: firestoreReducer // <- needed if using firestore
})



//const store = createStore(rootReducer, initialState)



/*
Fix for Firefox redux dev tools extension
https://github.com/zalmoxisus/redux-devtools-instrument/pull/19#issuecomment-400637274
 */
reduxModule.__DO_NOT_USE__ActionTypes.REPLACE = '@@redux/INIT';

const composeEnhancers =
	process.env.NODE_ENV !== 'production' && typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__
		? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({
				// Specify extensionâ€™s options like name, actionsBlacklist, actionsCreators, serialize...
		  })
		: compose;

const enhancer = composeEnhancers(applyMiddleware(thunk));


const store = createStore(rootReducer, enhancer);

store.asyncReducers = {};

export const injectReducer = (key, reducer) => {
	if (store.asyncReducers[key]) {
		return false;
	}
	store.asyncReducers[key] = reducer;
	store.replaceReducer(createReducer(store.asyncReducers));
	return store;
};

export default store;
