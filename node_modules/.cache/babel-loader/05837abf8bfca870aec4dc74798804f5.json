{"ast":null,"code":"import firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport * as Actions from 'app/store/actions';\nimport * as UserActions from './user.actions';\nexport var LOGIN_ERROR = 'LOGIN_ERROR';\nexport var LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport function submitLogin(_ref) {\n  var email = _ref.email,\n      password = _ref.password;\n  return function (dispatch) {\n    return jwtService.signInWithEmailAndPassword(email, password).then(function (user) {\n      dispatch(UserActions.setUserData(user));\n      return dispatch({\n        type: LOGIN_SUCCESS\n      });\n    }).catch(function (error) {\n      return dispatch({\n        type: LOGIN_ERROR,\n        payload: error\n      });\n    });\n  };\n}\nexport function submitLoginWithFireBase(_ref2) {\n  var username = _ref2.username,\n      password = _ref2.password;\n\n  if (!firebaseService.auth) {\n    console.warn(\"Firebase Service didn't initialize, check your configuration\");\n    return function () {\n      return false;\n    };\n  }\n\n  return function (dispatch) {\n    return firebaseService.auth.signInWithEmailAndPassword(username, password).then(function () {\n      return dispatch({\n        type: LOGIN_SUCCESS\n      });\n    }).catch(function (error) {\n      console.info('error');\n      var usernameErrorCodes = ['auth/email-already-in-use', 'auth/invalid-email', 'auth/operation-not-allowed', 'auth/user-not-found', 'auth/user-disabled'];\n      var passwordErrorCodes = ['auth/weak-password', 'auth/wrong-password'];\n      var response = {\n        username: usernameErrorCodes.includes(error.code) ? error.message : null,\n        password: passwordErrorCodes.includes(error.code) ? error.message : null\n      };\n\n      if (error.code === 'auth/invalid-api-key') {\n        dispatch(Actions.showMessage({\n          message: error.message\n        }));\n      }\n\n      return dispatch({\n        type: LOGIN_ERROR,\n        payload: response\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/msumaran/Documents/Proyectos/masternativos/src/app/auth/store/actions/login.actions.js"],"names":["firebaseService","jwtService","Actions","UserActions","LOGIN_ERROR","LOGIN_SUCCESS","submitLogin","email","password","dispatch","signInWithEmailAndPassword","then","user","setUserData","type","catch","error","payload","submitLoginWithFireBase","username","auth","console","warn","info","usernameErrorCodes","passwordErrorCodes","response","includes","code","message","showMessage"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,8BAA5B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,mBAAzB;AACA,OAAO,KAAKC,WAAZ,MAA6B,gBAA7B;AAEA,OAAO,IAAMC,WAAW,GAAG,aAApB;AACP,OAAO,IAAMC,aAAa,GAAG,eAAtB;AAEP,OAAO,SAASC,WAAT,OAA0C;AAAA,MAAnBC,KAAmB,QAAnBA,KAAmB;AAAA,MAAZC,QAAY,QAAZA,QAAY;AAChD,SAAO,UAAAC,QAAQ;AAAA,WACdR,UAAU,CACRS,0BADF,CAC6BH,KAD7B,EACoCC,QADpC,EAEEG,IAFF,CAEO,UAAAC,IAAI,EAAI;AACbH,MAAAA,QAAQ,CAACN,WAAW,CAACU,WAAZ,CAAwBD,IAAxB,CAAD,CAAR;AAEA,aAAOH,QAAQ,CAAC;AACfK,QAAAA,IAAI,EAAET;AADS,OAAD,CAAf;AAGA,KARF,EASEU,KATF,CASQ,UAAAC,KAAK,EAAI;AACf,aAAOP,QAAQ,CAAC;AACfK,QAAAA,IAAI,EAAEV,WADS;AAEfa,QAAAA,OAAO,EAAED;AAFM,OAAD,CAAf;AAIA,KAdF,CADc;AAAA,GAAf;AAgBA;AAED,OAAO,SAASE,uBAAT,QAAyD;AAAA,MAAtBC,QAAsB,SAAtBA,QAAsB;AAAA,MAAZX,QAAY,SAAZA,QAAY;;AAC/D,MAAI,CAACR,eAAe,CAACoB,IAArB,EAA2B;AAC1BC,IAAAA,OAAO,CAACC,IAAR,CAAa,8DAAb;AAEA,WAAO;AAAA,aAAM,KAAN;AAAA,KAAP;AACA;;AAED,SAAO,UAAAb,QAAQ;AAAA,WACdT,eAAe,CAACoB,IAAhB,CACEV,0BADF,CAC6BS,QAD7B,EACuCX,QADvC,EAEEG,IAFF,CAEO,YAAM;AACX,aAAOF,QAAQ,CAAC;AACfK,QAAAA,IAAI,EAAET;AADS,OAAD,CAAf;AAGA,KANF,EAOEU,KAPF,CAOQ,UAAAC,KAAK,EAAI;AACfK,MAAAA,OAAO,CAACE,IAAR,CAAa,OAAb;AACA,UAAMC,kBAAkB,GAAG,CAC1B,2BAD0B,EAE1B,oBAF0B,EAG1B,4BAH0B,EAI1B,qBAJ0B,EAK1B,oBAL0B,CAA3B;AAOA,UAAMC,kBAAkB,GAAG,CAAC,oBAAD,EAAuB,qBAAvB,CAA3B;AAEA,UAAMC,QAAQ,GAAG;AAChBP,QAAAA,QAAQ,EAAEK,kBAAkB,CAACG,QAAnB,CAA4BX,KAAK,CAACY,IAAlC,IAA0CZ,KAAK,CAACa,OAAhD,GAA0D,IADpD;AAEhBrB,QAAAA,QAAQ,EAAEiB,kBAAkB,CAACE,QAAnB,CAA4BX,KAAK,CAACY,IAAlC,IAA0CZ,KAAK,CAACa,OAAhD,GAA0D;AAFpD,OAAjB;;AAKA,UAAIb,KAAK,CAACY,IAAN,KAAe,sBAAnB,EAA2C;AAC1CnB,QAAAA,QAAQ,CAACP,OAAO,CAAC4B,WAAR,CAAoB;AAAED,UAAAA,OAAO,EAAEb,KAAK,CAACa;AAAjB,SAApB,CAAD,CAAR;AACA;;AAED,aAAOpB,QAAQ,CAAC;AACfK,QAAAA,IAAI,EAAEV,WADS;AAEfa,QAAAA,OAAO,EAAES;AAFM,OAAD,CAAf;AAIA,KA/BF,CADc;AAAA,GAAf;AAiCA","sourcesContent":["import firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport * as Actions from 'app/store/actions';\nimport * as UserActions from './user.actions';\n\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\n\nexport function submitLogin({ email, password }) {\n\treturn dispatch =>\n\t\tjwtService\n\t\t\t.signInWithEmailAndPassword(email, password)\n\t\t\t.then(user => {\n\t\t\t\tdispatch(UserActions.setUserData(user));\n\n\t\t\t\treturn dispatch({\n\t\t\t\t\ttype: LOGIN_SUCCESS\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\treturn dispatch({\n\t\t\t\t\ttype: LOGIN_ERROR,\n\t\t\t\t\tpayload: error\n\t\t\t\t});\n\t\t\t});\n}\n\nexport function submitLoginWithFireBase({ username, password }) {\n\tif (!firebaseService.auth) {\n\t\tconsole.warn(\"Firebase Service didn't initialize, check your configuration\");\n\n\t\treturn () => false;\n\t}\n\n\treturn dispatch =>\n\t\tfirebaseService.auth\n\t\t\t.signInWithEmailAndPassword(username, password)\n\t\t\t.then(() => {\n\t\t\t\treturn dispatch({\n\t\t\t\t\ttype: LOGIN_SUCCESS\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.info('error');\n\t\t\t\tconst usernameErrorCodes = [\n\t\t\t\t\t'auth/email-already-in-use',\n\t\t\t\t\t'auth/invalid-email',\n\t\t\t\t\t'auth/operation-not-allowed',\n\t\t\t\t\t'auth/user-not-found',\n\t\t\t\t\t'auth/user-disabled'\n\t\t\t\t];\n\t\t\t\tconst passwordErrorCodes = ['auth/weak-password', 'auth/wrong-password'];\n\n\t\t\t\tconst response = {\n\t\t\t\t\tusername: usernameErrorCodes.includes(error.code) ? error.message : null,\n\t\t\t\t\tpassword: passwordErrorCodes.includes(error.code) ? error.message : null\n\t\t\t\t};\n\n\t\t\t\tif (error.code === 'auth/invalid-api-key') {\n\t\t\t\t\tdispatch(Actions.showMessage({ message: error.message }));\n\t\t\t\t}\n\n\t\t\t\treturn dispatch({\n\t\t\t\t\ttype: LOGIN_ERROR,\n\t\t\t\t\tpayload: response\n\t\t\t\t});\n\t\t\t});\n}\n"]},"metadata":{},"sourceType":"module"}