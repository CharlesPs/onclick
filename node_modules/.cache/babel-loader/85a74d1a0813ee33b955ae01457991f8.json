{"ast":null,"code":"import FuseUtils from '@fuse/utils';\nimport history from '@history';\nimport firebaseService from 'app/services/firebaseService';\nimport _ from '@lodash';\nimport { showMessage } from 'app/store/actions/fuse';\nimport axios from 'axios';\nimport CardModel from '../../model/CardModel';\nimport ListModel from '../../model/ListModel';\nimport * as BoardsActions from './boards.actions';\nimport reorder, { reorderQuoteMap } from './reorder';\nexport var GET_BOARD = '[SCRUMBOARD APP] GET BOARD';\nexport var DELETE_BOARD = '[SCRUMBOARD APP] DELETE BOARD';\nexport var COPY_BOARD = '[SCRUMBOARD APP] COPY BOARD';\nexport var RENAME_BOARD = '[SCRUMBOARD APP] RENAME BOARD';\nexport var CHANGE_BOARD_SETTINGS = '[SCRUMBOARD APP] CHANGE BOARD SETTINGS';\nexport var RESET_BOARD = '[SCRUMBOARD APP] RESET BOARD';\nexport var ORDER_LIST = '[SCRUMBOARD APP] ORDER LIST';\nexport var ORDER_CARD = '[SCRUMBOARD APP] ORDER CARD';\nexport var ADD_CARD = '[SCRUMBOARD APP] ADD CARD';\nexport var ADD_LIST = '[SCRUMBOARD APP] ADD LIST';\nexport var ADD_LABEL = '[SCRUMBOARD APP] ADD LABEL';\nexport var RENAME_LIST = '[SCRUMBOARD APP] RENAME LIST';\nexport var REMOVE_LIST = '[SCRUMBOARD APP] REMOVE LIST';\nexport function getBoard(params) {\n  console.log('getBoard');\n  var ref = firebaseService.db.ref('board/' + params.boardId);\n  return function (dispatch) {\n    return ref.once('value').then(function (snapshot) {\n      var board = snapshot.val();\n      board.id = params.boardId;\n      return dispatch({\n        type: GET_BOARD,\n        payload: board\n      });\n    });\n  };\n}\nexport function resetBoard() {\n  return {\n    type: RESET_BOARD\n  };\n}\nexport function reorderList(result) {\n  return function (dispatch, getState) {\n    var board = getState().scrumboardApp.board;\n    var lists = board.lists;\n    var ordered = reorder(lists, result.source.index, result.destination.index);\n    console.log(ordered); // const request = axios.post('/api/scrumboard-app/list/order', {\n    //     boardId: board.id,\n    //     lists: ordered\n    // });\n    // request.then(response => {\n    //     dispatch(\n    //         showMessage({\n    //             message: 'List Order Saved',\n    //             autoHideDuration: 2000,\n    //             anchorOrigin: {\n    //                 vertical: 'top',\n    //                 horizontal: 'right'\n    //             }\n    //         })\n    //     );\n    // });\n    // return dispatch({\n    //     type: ORDER_LIST,\n    //     payload: ordered\n    // });\n  };\n}\nexport function reorderCard(result) {\n  return function (dispatch, getState) {\n    var board = getState().scrumboardApp.board;\n    var lists = board.lists;\n    var ordered = reorderQuoteMap(lists, result.source, result.destination);\n    console.log(ordered); // const request = axios.post('/api/scrumboard-app/card/order', {\n    //     boardId: board.id,\n    //     lists: ordered\n    // });\n    // request.then(response => {\n    //     dispatch(\n    //         showMessage({\n    //             message: 'Card Order Saved',\n    //             autoHideDuration: 2000,\n    //             anchorOrigin: {\n    //                 vertical: 'top',\n    //                 horizontal: 'right'\n    //             }\n    //         })\n    //     );\n    // });\n    // return dispatch({\n    //     type: ORDER_CARD,\n    //     payload: ordered\n    // });\n  };\n}\nexport function newCard(boardId, listId, cardTitle) {\n  var data = new CardModel({\n    name: cardTitle\n  });\n  var request = axios.post('/api/scrumboard-app/card/new', {\n    boardId: boardId,\n    listId: listId,\n    data: data\n  });\n  return function (dispatch) {\n    return new Promise(function (resolve, reject) {\n      request.then(function (response) {\n        resolve(response.data);\n        return dispatch({\n          type: ADD_CARD,\n          payload: response.data\n        });\n      });\n    });\n  };\n}\nexport function newList(boardId, listTitle) {\n  var data = new ListModel({\n    name: listTitle\n  });\n  return function (dispatch) {\n    return firebaseService.db.ref('board/' + boardId + '/lists').push(data).then(function (snapshot) {\n      dispatch(getBoard({\n        boardId: boardId\n      }));\n    });\n  };\n}\nexport function renameList(boardId, listId, listTitle) {\n  return function (dispatch, getState) {\n    firebaseService.db.ref(\"board/\".concat(boardId, \"/lists/\").concat(listId)).update({\n      name: listTitle\n    }).then(function () {\n      Promise.all([dispatch({\n        type: RENAME_LIST,\n        listId: listId,\n        listTitle: listTitle\n      })]).then(function () {\n        return dispatch(getBoard({\n          boardId: boardId\n        }));\n      });\n    }).catch(function (error) {\n      return {\n        errorCode: error.code,\n        errorMessage: error.message\n      };\n    });\n  };\n}\nexport function removeList(boardId, listId) {\n  return function (dispatch) {\n    return firebaseService.db.ref(\"board/\".concat(boardId, \"/lists/\").concat(listId)).remove().then(function () {\n      Promise.all([dispatch({\n        type: REMOVE_LIST\n      })]).then(function () {\n        return dispatch(getBoard({\n          boardId: boardId\n        }));\n      });\n    }).catch(function (error) {\n      return {\n        errorCode: error.code,\n        errorMessage: error.message\n      };\n    });\n  };\n}\nexport function addLabel(label) {\n  return function (dispatch) {\n    return dispatch({\n      type: ADD_LABEL,\n      payload: label\n    });\n  };\n}\nexport function changeBoardSettings(newSettings) {\n  return function (dispatch, getState) {\n    var board = getState().scrumboardApp.board;\n\n    var settings = _.merge(board.settings, newSettings);\n\n    var request = axios.post('/api/scrumboard-app/board/settings/update', {\n      boardId: board.id,\n      settings: settings\n    });\n    return request.then(function (response) {\n      return dispatch({\n        type: CHANGE_BOARD_SETTINGS,\n        payload: response.data\n      });\n    });\n  };\n}\nexport function deleteBoard(boardId) {\n  var request = axios.post('/api/scrumboard-app/board/delete', {\n    boardId: boardId\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      history.push({\n        pathname: '/apps/scrumboard/boards'\n      });\n      return dispatch({\n        type: DELETE_BOARD\n      });\n    });\n  };\n}\nexport function copyBoard(board) {\n  var newBoard = _.merge(board, {\n    id: FuseUtils.generateGUID(),\n    name: \"\".concat(board.name, \" (Copied)\"),\n    uri: \"\".concat(board.uri, \"-copied\")\n  });\n\n  return function (dispatch) {\n    dispatch(BoardsActions.newBoard(newBoard));\n    return {\n      type: COPY_BOARD\n    };\n  };\n}\nexport function renameBoard(boardId, boardTitle) {\n  return function (dispatch, getState) {\n    firebaseService.db.ref(\"board/\".concat(boardId)).update({\n      name: boardTitle\n    }).then(function () {\n      Promise.all([dispatch({\n        type: RENAME_BOARD,\n        boardTitle: boardTitle\n      })]).then(function () {\n        return dispatch(getBoard({\n          boardId: boardId\n        }));\n      });\n    }).catch(function (error) {\n      return {\n        errorCode: error.code,\n        errorMessage: error.message\n      };\n    });\n  };\n}","map":{"version":3,"sources":["/Users/msumaran/Documents/Proyectos/masternativos/src/app/scrumboard/store/actions/board.actions.js"],"names":["FuseUtils","history","firebaseService","_","showMessage","axios","CardModel","ListModel","BoardsActions","reorder","reorderQuoteMap","GET_BOARD","DELETE_BOARD","COPY_BOARD","RENAME_BOARD","CHANGE_BOARD_SETTINGS","RESET_BOARD","ORDER_LIST","ORDER_CARD","ADD_CARD","ADD_LIST","ADD_LABEL","RENAME_LIST","REMOVE_LIST","getBoard","params","console","log","ref","db","boardId","dispatch","once","then","snapshot","board","val","id","type","payload","resetBoard","reorderList","result","getState","scrumboardApp","lists","ordered","source","index","destination","reorderCard","newCard","listId","cardTitle","data","name","request","post","Promise","resolve","reject","response","newList","listTitle","push","renameList","update","all","catch","error","errorCode","code","errorMessage","message","removeList","remove","addLabel","label","changeBoardSettings","newSettings","settings","merge","deleteBoard","pathname","copyBoard","newBoard","generateGUID","uri","renameBoard","boardTitle"],"mappings":"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","sourcesContent":["import FuseUtils from '@fuse/utils';\nimport history from '@history';\nimport firebaseService from 'app/services/firebaseService';\nimport _ from '@lodash';\nimport { showMessage } from 'app/store/actions/fuse';\nimport axios from 'axios';\nimport CardModel from '../../model/CardModel';\nimport ListModel from '../../model/ListModel';\nimport * as BoardsActions from './boards.actions';\nimport reorder, { reorderQuoteMap } from './reorder';\n\n\nexport const GET_BOARD = '[SCRUMBOARD APP] GET BOARD';\nexport const DELETE_BOARD = '[SCRUMBOARD APP] DELETE BOARD';\nexport const COPY_BOARD = '[SCRUMBOARD APP] COPY BOARD';\nexport const RENAME_BOARD = '[SCRUMBOARD APP] RENAME BOARD';\nexport const CHANGE_BOARD_SETTINGS = '[SCRUMBOARD APP] CHANGE BOARD SETTINGS';\nexport const RESET_BOARD = '[SCRUMBOARD APP] RESET BOARD';\nexport const ORDER_LIST = '[SCRUMBOARD APP] ORDER LIST';\nexport const ORDER_CARD = '[SCRUMBOARD APP] ORDER CARD';\nexport const ADD_CARD = '[SCRUMBOARD APP] ADD CARD';\nexport const ADD_LIST = '[SCRUMBOARD APP] ADD LIST';\nexport const ADD_LABEL = '[SCRUMBOARD APP] ADD LABEL';\nexport const RENAME_LIST = '[SCRUMBOARD APP] RENAME LIST';\nexport const REMOVE_LIST = '[SCRUMBOARD APP] REMOVE LIST';\n\nexport function getBoard(params) {\n    console.log('getBoard');\n    let ref = firebaseService.db.ref('board/' + params.boardId);\n    return dispatch =>\n        ref\n        .once('value')\n        .then(snapshot => {\n            let board = snapshot.val();\n            board.id = params.boardId;\n            return dispatch({\n                type: GET_BOARD,\n                payload: board\n            })\n\n        });\n\n}\n\nexport function resetBoard() {\n    return {\n        type: RESET_BOARD\n    };\n}\n\nexport function reorderList(result) {\n    return (dispatch, getState) => {\n        const { board } = getState().scrumboardApp;\n        const { lists } = board;\n\n        const ordered = reorder(lists, result.source.index, result.destination.index);\n\n        console.log(ordered);\n\n        // const request = axios.post('/api/scrumboard-app/list/order', {\n        //     boardId: board.id,\n        //     lists: ordered\n        // });\n\n        // request.then(response => {\n        //     dispatch(\n        //         showMessage({\n        //             message: 'List Order Saved',\n        //             autoHideDuration: 2000,\n        //             anchorOrigin: {\n        //                 vertical: 'top',\n        //                 horizontal: 'right'\n        //             }\n        //         })\n        //     );\n        // });\n\n        // return dispatch({\n        //     type: ORDER_LIST,\n        //     payload: ordered\n        // });\n    };\n}\n\nexport function reorderCard(result) {\n    return (dispatch, getState) => {\n        const { board } = getState().scrumboardApp;\n        const { lists } = board;\n\n        const ordered = reorderQuoteMap(lists, result.source, result.destination);\n\n\n        console.log(ordered);\n        // const request = axios.post('/api/scrumboard-app/card/order', {\n        //     boardId: board.id,\n        //     lists: ordered\n        // });\n\n        // request.then(response => {\n        //     dispatch(\n        //         showMessage({\n        //             message: 'Card Order Saved',\n        //             autoHideDuration: 2000,\n        //             anchorOrigin: {\n        //                 vertical: 'top',\n        //                 horizontal: 'right'\n        //             }\n        //         })\n        //     );\n        // });\n\n        // return dispatch({\n        //     type: ORDER_CARD,\n        //     payload: ordered\n        // });\n    };\n}\n\nexport function newCard(boardId, listId, cardTitle) {\n    const data = new CardModel({ name: cardTitle });\n\n    const request = axios.post('/api/scrumboard-app/card/new', {\n        boardId,\n        listId,\n        data\n    });\n    return dispatch =>\n        new Promise((resolve, reject) => {\n            request.then(response => {\n                resolve(response.data);\n                return dispatch({\n                    type: ADD_CARD,\n                    payload: response.data\n                });\n            });\n        });\n}\n\nexport function newList(boardId, listTitle) {\n    const data = new ListModel({ name: listTitle });\n    return dispatch =>\n        firebaseService.db.ref('board/' + boardId + '/lists').push(data).then((snapshot) => {\n            dispatch(getBoard({ boardId: boardId }));\n        });\n\n}\n\nexport function renameList(boardId, listId, listTitle) {\n\n    return (dispatch, getState) => {\n        firebaseService.db.ref(`board/${boardId}/lists/${listId}`).update({ name: listTitle }).then(() => {\n            Promise.all([\n                dispatch({\n                    type: RENAME_LIST,\n                    listId,\n                    listTitle\n                })\n            ]).then(() => dispatch(getBoard({ boardId: boardId })));\n        }).catch(error => {\n            return {\n                errorCode: error.code,\n                errorMessage: error.message\n            }\n        });\n    };\n}\n\nexport function removeList(boardId, listId) {\n\n    return dispatch =>\n        firebaseService.db.ref(`board/${boardId}/lists/${listId}`).remove().then(() => {\n            Promise.all([\n                dispatch({\n                    type: REMOVE_LIST\n                })\n            ]).then(() => dispatch(getBoard({ boardId: boardId })));\n        }).catch(error => {\n            return {\n                errorCode: error.code,\n                errorMessage: error.message\n            }\n        });\n}\n\nexport function addLabel(label) {\n    return dispatch => {\n        return dispatch({\n            type: ADD_LABEL,\n            payload: label\n        });\n    };\n}\n\nexport function changeBoardSettings(newSettings) {\n    return (dispatch, getState) => {\n        const { board } = getState().scrumboardApp;\n        const settings = _.merge(board.settings, newSettings);\n        const request = axios.post('/api/scrumboard-app/board/settings/update', {\n            boardId: board.id,\n            settings\n        });\n\n        return request.then(response =>\n            dispatch({\n                type: CHANGE_BOARD_SETTINGS,\n                payload: response.data\n            })\n        );\n    };\n}\n\nexport function deleteBoard(boardId) {\n    const request = axios.post('/api/scrumboard-app/board/delete', {\n        boardId\n    });\n\n    return dispatch =>\n        request.then(response => {\n            history.push({\n                pathname: '/apps/scrumboard/boards'\n            });\n\n            return dispatch({\n                type: DELETE_BOARD\n            });\n        });\n}\n\nexport function copyBoard(board) {\n    const newBoard = _.merge(board, {\n        id: FuseUtils.generateGUID(),\n        name: `${board.name} (Copied)`,\n        uri: `${board.uri}-copied`\n    });\n    return dispatch => {\n        dispatch(BoardsActions.newBoard(newBoard));\n        return { type: COPY_BOARD };\n    };\n}\n\nexport function renameBoard(boardId, boardTitle) {\n    return (dispatch, getState) => {\n        firebaseService.db.ref(`board/${boardId}`).update({ name: boardTitle }).then(() => {\n            Promise.all([\n                dispatch({\n                    type: RENAME_BOARD,\n                    boardTitle\n                })\n            ]).then(() => dispatch(getBoard({ boardId: boardId })));\n        }).catch(error => {\n            return {\n                errorCode: error.code,\n                errorMessage: error.message\n            }\n        });\n    };\n\n   \n}"]},"metadata":{},"sourceType":"module"}