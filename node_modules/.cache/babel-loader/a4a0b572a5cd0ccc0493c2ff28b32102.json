{"ast":null,"code":"import history from '@history';\nimport BoardModel from '../../model/BoardModel';\nimport firebaseService from 'app/services/firebaseService';\nimport _ from '@lodash';\nexport var GET_BOARDS = '[SCRUMBOARD APP] GET BOARDS';\nexport var RESET_BOARDS = '[SCRUMBOARD APP] RESET BOARDS';\nexport var NEW_BOARD = '[SCRUMBOARD APP] NEW BOARD';\nexport function getBoards() {\n  var ref = firebaseService.db.ref(\"board\");\n  return function (dispatch) {\n    return ref.once('value').then(function (snapshot) {\n      var boards = snapshot.val(); // if (boards !== null) {\n      //     _.forEach(boards, function(value, key) {\n      //         if (value) value.id = key;\n      //     });\n      // } else {\n      //     boards = [];\n      // }\n      //boards = [];\n\n      return dispatch({\n        type: GET_BOARDS,\n        payload: boards\n      });\n    });\n  };\n}\nexport function resetBoards() {\n  return {\n    type: RESET_BOARDS\n  };\n}\nexport function newBoard(board) {\n  board = new BoardModel();\n  return function (dispatch) {\n    return firebaseService.db.ref(\"board\").push(board).then(function (snapshot) {\n      history.push({\n        pathname: \"/scrumboard/boards/\".concat(snapshot.key, \"/\").concat(board.handle)\n      });\n      return dispatch({\n        type: NEW_BOARD,\n        board: board\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/msumaran/Documents/Proyectos/masternativos/src/app/scrumboard/store/actions/boards.actions.js"],"names":["history","BoardModel","firebaseService","_","GET_BOARDS","RESET_BOARDS","NEW_BOARD","getBoards","ref","db","dispatch","once","then","snapshot","boards","val","type","payload","resetBoards","newBoard","board","push","pathname","key","handle"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,OAAO,IAAMC,UAAU,GAAG,6BAAnB;AACP,OAAO,IAAMC,YAAY,GAAG,+BAArB;AACP,OAAO,IAAMC,SAAS,GAAG,4BAAlB;AAEP,OAAO,SAASC,SAAT,GAAqB;AAExB,MAAIC,GAAG,GAAGN,eAAe,CAACO,EAAhB,CAAmBD,GAAnB,SAAV;AACA,SAAO,UAAAE,QAAQ;AAAA,WACXF,GAAG,CAACG,IAAJ,CAAS,OAAT,EACCC,IADD,CACM,UAAAC,QAAQ,EAAI;AACd,UAAIC,MAAM,GAAGD,QAAQ,CAACE,GAAT,EAAb,CADc,CAGd;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACC,aAAOL,QAAQ,CAAC;AACZM,QAAAA,IAAI,EAAEZ,UADM;AAEZa,QAAAA,OAAO,EAAEH;AAFG,OAAD,CAAf;AAKH,KAjBD,CADW;AAAA,GAAf;AAmBH;AAED,OAAO,SAASI,WAAT,GAAuB;AAC1B,SAAO;AACHF,IAAAA,IAAI,EAAEX;AADH,GAAP;AAGH;AAED,OAAO,SAASc,QAAT,CAAkBC,KAAlB,EAAyB;AAC5BA,EAAAA,KAAK,GAAG,IAAInB,UAAJ,EAAR;AAEA,SAAO,UAAAS,QAAQ;AAAA,WACXR,eAAe,CAACO,EAAhB,CAAmBD,GAAnB,UACCa,IADD,CACMD,KADN,EAECR,IAFD,CAEM,UAAAC,QAAQ,EAAI;AAEdb,MAAAA,OAAO,CAACqB,IAAR,CAAa;AACTC,QAAAA,QAAQ,+BAAwBT,QAAQ,CAACU,GAAjC,cAAwCH,KAAK,CAACI,MAA9C;AADC,OAAb;AAGA,aAAOd,QAAQ,CAAC;AACZM,QAAAA,IAAI,EAAEV,SADM;AAEZc,QAAAA,KAAK,EAAEA;AAFK,OAAD,CAAf;AAIH,KAXD,CADW;AAAA,GAAf;AAaH","sourcesContent":["import history from '@history';\nimport BoardModel from '../../model/BoardModel';\nimport firebaseService from 'app/services/firebaseService';\nimport _ from '@lodash';\nexport const GET_BOARDS = '[SCRUMBOARD APP] GET BOARDS';\nexport const RESET_BOARDS = '[SCRUMBOARD APP] RESET BOARDS';\nexport const NEW_BOARD = '[SCRUMBOARD APP] NEW BOARD';\n\nexport function getBoards() {\n\n    let ref = firebaseService.db.ref(`board`);\n    return dispatch =>\n        ref.once('value')\n        .then(snapshot => {\n            let boards = snapshot.val();\n\n            // if (boards !== null) {\n            //     _.forEach(boards, function(value, key) {\n            //         if (value) value.id = key;\n            //     });\n            // } else {\n            //     boards = [];\n            // }\n          \t//boards = [];\n            return dispatch({\n                type: GET_BOARDS,\n                payload: boards\n            })\n\n        });\n}\n\nexport function resetBoards() {\n    return {\n        type: RESET_BOARDS\n    };\n}\n\nexport function newBoard(board) {\n    board = new BoardModel();\n\n    return dispatch =>\n        firebaseService.db.ref(`board`)\n        .push(board)\n        .then(snapshot => {\n\n            history.push({\n                pathname: `/scrumboard/boards/${snapshot.key}/${board.handle}`\n            });\n            return dispatch({\n                type: NEW_BOARD,\n                board: board\n            });\n        });\n}"]},"metadata":{},"sourceType":"module"}