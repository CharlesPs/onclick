{"ast":null,"code":"import history from '@history';\nimport axios from 'axios';\nimport BoardModel from '../../model/BoardModel';\nimport firebaseService from 'app/services/firebaseService';\nexport var GET_BOARDS = '[SCRUMBOARD APP] GET BOARDS';\nexport var RESET_BOARDS = '[SCRUMBOARD APP] RESET BOARDS';\nexport var NEW_BOARD = '[SCRUMBOARD APP] NEW BOARD';\nexport function getBoards() {\n  var request = axios.get('/api/scrumboard-app/boards');\n  return function (dispatch) {\n    return request.then(function (response) {\n      return dispatch({\n        type: GET_BOARDS,\n        payload: response.data\n      });\n    });\n  };\n}\nexport function resetBoards() {\n  return {\n    type: RESET_BOARDS\n  };\n}\nexport function newBoard(board) {\n  var b = {\n    board: board || new BoardModel()\n  };\n  firebaseService.db.ref(\"board\").push(b).then(function (snapshot) {\n    return function (dispatch) {\n      history.push({\n        pathname: \"/scrumboard/boards/\".concat(snapshot.key, \"/\").concat(b.handle)\n      });\n      return dispatch({\n        type: NEW_BOARD,\n        board: b\n      });\n    };\n  }); // const request = axios.post('/api/scrumboard-app/board/new', {\n  // \tboard: board || new BoardModel()\n  // });\n  // return dispatch =>\n  // \trequest.then(response => {\n  // \t\tconst _board = response.data;\n  // \t\thistory.push({\n  // \t\t\tpathname: `/scrumboard/boards/${_board.id}/${_board.handle}`\n  // \t\t});\n  // \t\treturn dispatch({\n  // \t\t\ttype: NEW_BOARD,\n  // \t\t\tboard: _board\n  // \t\t});\n  // \t});\n}","map":{"version":3,"sources":["/Users/msumaran/Documents/Proyectos/masternativos/src/app/scrumboard/store/actions/boards.actions.js"],"names":["history","axios","BoardModel","firebaseService","GET_BOARDS","RESET_BOARDS","NEW_BOARD","getBoards","request","get","dispatch","then","response","type","payload","data","resetBoards","newBoard","board","b","db","ref","push","snapshot","pathname","key","handle"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAO,IAAMC,UAAU,GAAG,6BAAnB;AACP,OAAO,IAAMC,YAAY,GAAG,+BAArB;AACP,OAAO,IAAMC,SAAS,GAAG,4BAAlB;AAEP,OAAO,SAASC,SAAT,GAAqB;AACxB,MAAMC,OAAO,GAAGP,KAAK,CAACQ,GAAN,CAAU,4BAAV,CAAhB;AAEA,SAAO,UAAAC,QAAQ;AAAA,WACXF,OAAO,CAACG,IAAR,CAAa,UAAAC,QAAQ;AAAA,aACjBF,QAAQ,CAAC;AACLG,QAAAA,IAAI,EAAET,UADD;AAELU,QAAAA,OAAO,EAAEF,QAAQ,CAACG;AAFb,OAAD,CADS;AAAA,KAArB,CADW;AAAA,GAAf;AAOH;AAED,OAAO,SAASC,WAAT,GAAuB;AAC1B,SAAO;AACHH,IAAAA,IAAI,EAAER;AADH,GAAP;AAGH;AAED,OAAO,SAASY,QAAT,CAAkBC,KAAlB,EAAyB;AAC5B,MAAIC,CAAC,GAAG;AAAED,IAAAA,KAAK,EAAEA,KAAK,IAAI,IAAIhB,UAAJ;AAAlB,GAAR;AACAC,EAAAA,eAAe,CAACiB,EAAhB,CAAmBC,GAAnB,UACKC,IADL,CACUH,CADV,EAEKR,IAFL,CAEU,UAAAY,QAAQ,EAAI;AACd,WAAO,UAAAb,QAAQ,EAAI;AACfV,MAAAA,OAAO,CAACsB,IAAR,CAAa;AACTE,QAAAA,QAAQ,+BAAwBD,QAAQ,CAACE,GAAjC,cAAwCN,CAAC,CAACO,MAA1C;AADC,OAAb;AAGA,aAAOhB,QAAQ,CAAC;AACZG,QAAAA,IAAI,EAAEP,SADM;AAEZY,QAAAA,KAAK,EAAEC;AAFK,OAAD,CAAf;AAIH,KARD;AAWH,GAdL,EAF4B,CAqB5B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH","sourcesContent":["import history from '@history';\nimport axios from 'axios';\nimport BoardModel from '../../model/BoardModel';\nimport firebaseService from 'app/services/firebaseService';\nexport const GET_BOARDS = '[SCRUMBOARD APP] GET BOARDS';\nexport const RESET_BOARDS = '[SCRUMBOARD APP] RESET BOARDS';\nexport const NEW_BOARD = '[SCRUMBOARD APP] NEW BOARD';\n\nexport function getBoards() {\n    const request = axios.get('/api/scrumboard-app/boards');\n\n    return dispatch =>\n        request.then(response =>\n            dispatch({\n                type: GET_BOARDS,\n                payload: response.data\n            })\n        );\n}\n\nexport function resetBoards() {\n    return {\n        type: RESET_BOARDS\n    };\n}\n\nexport function newBoard(board) {\n    let b = { board: board || new BoardModel() };\n    firebaseService.db.ref(`board`)\n        .push(b)\n        .then(snapshot => {\n            return dispatch => {\n                history.push({\n                    pathname: `/scrumboard/boards/${snapshot.key}/${b.handle}`\n                });\n                return dispatch({\n                    type: NEW_BOARD,\n                    board: b\n                });\n            };\n\n\n        })\n\n\n\n\n    // const request = axios.post('/api/scrumboard-app/board/new', {\n    // \tboard: board || new BoardModel()\n    // });\n\n    // return dispatch =>\n    // \trequest.then(response => {\n    // \t\tconst _board = response.data;\n    // \t\thistory.push({\n    // \t\t\tpathname: `/scrumboard/boards/${_board.id}/${_board.handle}`\n    // \t\t});\n    // \t\treturn dispatch({\n    // \t\t\ttype: NEW_BOARD,\n    // \t\t\tboard: _board\n    // \t\t});\n    // \t});\n}"]},"metadata":{},"sourceType":"module"}