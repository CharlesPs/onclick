{"ast":null,"code":"import FuseUtils from '@fuse/utils';\nimport history from '@history';\nimport firebaseService from 'app/services/firebaseService';\nimport _ from '@lodash';\nimport { showMessage } from 'app/store/actions/fuse';\nimport axios from 'axios';\nimport CardModel from '../../model/CardModel';\nimport ListModel from '../../model/ListModel';\nimport * as BoardsActions from './boards.actions';\nimport reorder, { reorderQuoteMap } from './reorder';\nexport var GET_BOARD = '[SCRUMBOARD APP] GET BOARD';\nexport var DELETE_BOARD = '[SCRUMBOARD APP] DELETE BOARD';\nexport var COPY_BOARD = '[SCRUMBOARD APP] COPY BOARD';\nexport var RENAME_BOARD = '[SCRUMBOARD APP] RENAME BOARD';\nexport var CHANGE_BOARD_SETTINGS = '[SCRUMBOARD APP] CHANGE BOARD SETTINGS';\nexport var RESET_BOARD = '[SCRUMBOARD APP] RESET BOARD';\nexport var ORDER_LIST = '[SCRUMBOARD APP] ORDER LIST';\nexport var ORDER_CARD = '[SCRUMBOARD APP] ORDER CARD';\nexport var ADD_CARD = '[SCRUMBOARD APP] ADD CARD';\nexport var ADD_LIST = '[SCRUMBOARD APP] ADD LIST';\nexport var ADD_LABEL = '[SCRUMBOARD APP] ADD LABEL';\nexport var RENAME_LIST = '[SCRUMBOARD APP] RENAME LIST';\nexport var REMOVE_LIST = '[SCRUMBOARD APP] REMOVE LIST';\nexport function getBoard(params) {\n  console.log(params);\n  var ref = firebaseService.db.ref('board/' + params.boardId);\n  return function (dispatch) {\n    return ref.once('value').then(function (snapshot) {\n      var contacts = snapshot.val();\n      return dispatch({\n        type: GET_BOARD,\n        payload: contacts\n      });\n    });\n  }; // const request = axios.get('/api/scrumboard-app/board', { params });\n  // return dispatch =>\n  // \trequest.then(\n  // \t\tresponse =>\n  // \t\t\tdispatch({\n  // \t\t\t\ttype: GET_BOARD,\n  // \t\t\t\tpayload: response.data\n  // \t\t\t}),\n  // \t\terror => {\n  // \t\t\tdispatch(\n  // \t\t\t\tshowMessage({\n  // \t\t\t\t\tmessage: error.response.data,\n  // \t\t\t\t\tautoHideDuration: 2000,\n  // \t\t\t\t\tanchorOrigin: {\n  // \t\t\t\t\t\tvertical: 'top',\n  // \t\t\t\t\t\thorizontal: 'right'\n  // \t\t\t\t\t}\n  // \t\t\t\t})\n  // \t\t\t);\n  // \t\t\thistory.push({\n  // \t\t\t\tpathname: '/apps/scrumboard/boards'\n  // \t\t\t});\n  // \t\t}\n  // \t);\n}\nexport function resetBoard() {\n  return {\n    type: RESET_BOARD\n  };\n}\nexport function reorderList(result) {\n  return function (dispatch, getState) {\n    var board = getState().scrumboardApp.board;\n    var lists = board.lists;\n    var ordered = reorder(lists, result.source.index, result.destination.index);\n    var request = axios.post('/api/scrumboard-app/list/order', {\n      boardId: board.id,\n      lists: ordered\n    });\n    request.then(function (response) {\n      dispatch(showMessage({\n        message: 'List Order Saved',\n        autoHideDuration: 2000,\n        anchorOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        }\n      }));\n    });\n    return dispatch({\n      type: ORDER_LIST,\n      payload: ordered\n    });\n  };\n}\nexport function reorderCard(result) {\n  return function (dispatch, getState) {\n    var board = getState().scrumboardApp.board;\n    var lists = board.lists;\n    var ordered = reorderQuoteMap(lists, result.source, result.destination);\n    var request = axios.post('/api/scrumboard-app/card/order', {\n      boardId: board.id,\n      lists: ordered\n    });\n    request.then(function (response) {\n      dispatch(showMessage({\n        message: 'Card Order Saved',\n        autoHideDuration: 2000,\n        anchorOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        }\n      }));\n    });\n    return dispatch({\n      type: ORDER_CARD,\n      payload: ordered\n    });\n  };\n}\nexport function newCard(boardId, listId, cardTitle) {\n  var data = new CardModel({\n    name: cardTitle\n  });\n  var request = axios.post('/api/scrumboard-app/card/new', {\n    boardId: boardId,\n    listId: listId,\n    data: data\n  });\n  return function (dispatch) {\n    return new Promise(function (resolve, reject) {\n      request.then(function (response) {\n        resolve(response.data);\n        return dispatch({\n          type: ADD_CARD,\n          payload: response.data\n        });\n      });\n    });\n  };\n}\nexport function newList(boardId, listTitle) {\n  var data = new ListModel({\n    name: listTitle\n  });\n  var request = axios.post('/api/scrumboard-app/list/new', {\n    boardId: boardId,\n    data: data\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      return dispatch({\n        type: ADD_LIST,\n        payload: response.data\n      });\n    });\n  };\n}\nexport function renameList(boardId, listId, listTitle) {\n  var request = axios.post('/api/scrumboard-app/list/rename', {\n    boardId: boardId,\n    listId: listId,\n    listTitle: listTitle\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      return dispatch({\n        type: RENAME_LIST,\n        listId: listId,\n        listTitle: listTitle\n      });\n    });\n  };\n}\nexport function removeList(boardId, listId) {\n  var request = axios.post('/api/scrumboard-app/list/remove', {\n    boardId: boardId,\n    listId: listId\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      return dispatch({\n        type: REMOVE_LIST,\n        listId: listId\n      });\n    });\n  };\n}\nexport function addLabel(label) {\n  return function (dispatch) {\n    return dispatch({\n      type: ADD_LABEL,\n      payload: label\n    });\n  };\n}\nexport function changeBoardSettings(newSettings) {\n  return function (dispatch, getState) {\n    var board = getState().scrumboardApp.board;\n\n    var settings = _.merge(board.settings, newSettings);\n\n    var request = axios.post('/api/scrumboard-app/board/settings/update', {\n      boardId: board.id,\n      settings: settings\n    });\n    return request.then(function (response) {\n      return dispatch({\n        type: CHANGE_BOARD_SETTINGS,\n        payload: response.data\n      });\n    });\n  };\n}\nexport function deleteBoard(boardId) {\n  var request = axios.post('/api/scrumboard-app/board/delete', {\n    boardId: boardId\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      history.push({\n        pathname: '/apps/scrumboard/boards'\n      });\n      return dispatch({\n        type: DELETE_BOARD\n      });\n    });\n  };\n}\nexport function copyBoard(board) {\n  var newBoard = _.merge(board, {\n    id: FuseUtils.generateGUID(),\n    name: \"\".concat(board.name, \" (Copied)\"),\n    uri: \"\".concat(board.uri, \"-copied\")\n  });\n\n  return function (dispatch) {\n    dispatch(BoardsActions.newBoard(newBoard));\n    return {\n      type: COPY_BOARD\n    };\n  };\n}\nexport function renameBoard(boardId, boardTitle) {\n  var request = axios.post('/api/scrumboard-app/board/rename', {\n    boardId: boardId,\n    boardTitle: boardTitle\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      return dispatch({\n        type: RENAME_BOARD,\n        boardTitle: boardTitle\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/msumaran/Documents/Proyectos/masternativos/src/app/scrumboard/store/actions/board.actions.js"],"names":["FuseUtils","history","firebaseService","_","showMessage","axios","CardModel","ListModel","BoardsActions","reorder","reorderQuoteMap","GET_BOARD","DELETE_BOARD","COPY_BOARD","RENAME_BOARD","CHANGE_BOARD_SETTINGS","RESET_BOARD","ORDER_LIST","ORDER_CARD","ADD_CARD","ADD_LIST","ADD_LABEL","RENAME_LIST","REMOVE_LIST","getBoard","params","console","log","ref","db","boardId","dispatch","once","then","snapshot","contacts","val","type","payload","resetBoard","reorderList","result","getState","board","scrumboardApp","lists","ordered","source","index","destination","request","post","id","response","message","autoHideDuration","anchorOrigin","vertical","horizontal","reorderCard","newCard","listId","cardTitle","data","name","Promise","resolve","reject","newList","listTitle","renameList","removeList","addLabel","label","changeBoardSettings","newSettings","settings","merge","deleteBoard","push","pathname","copyBoard","newBoard","generateGUID","uri","renameBoard","boardTitle"],"mappings":"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","sourcesContent":["import FuseUtils from '@fuse/utils';\nimport history from '@history';\nimport firebaseService from 'app/services/firebaseService';\nimport _ from '@lodash';\nimport { showMessage } from 'app/store/actions/fuse';\nimport axios from 'axios';\nimport CardModel from '../../model/CardModel';\nimport ListModel from '../../model/ListModel';\nimport * as BoardsActions from './boards.actions';\nimport reorder, { reorderQuoteMap } from './reorder';\n\n\nexport const GET_BOARD = '[SCRUMBOARD APP] GET BOARD';\nexport const DELETE_BOARD = '[SCRUMBOARD APP] DELETE BOARD';\nexport const COPY_BOARD = '[SCRUMBOARD APP] COPY BOARD';\nexport const RENAME_BOARD = '[SCRUMBOARD APP] RENAME BOARD';\nexport const CHANGE_BOARD_SETTINGS = '[SCRUMBOARD APP] CHANGE BOARD SETTINGS';\nexport const RESET_BOARD = '[SCRUMBOARD APP] RESET BOARD';\nexport const ORDER_LIST = '[SCRUMBOARD APP] ORDER LIST';\nexport const ORDER_CARD = '[SCRUMBOARD APP] ORDER CARD';\nexport const ADD_CARD = '[SCRUMBOARD APP] ADD CARD';\nexport const ADD_LIST = '[SCRUMBOARD APP] ADD LIST';\nexport const ADD_LABEL = '[SCRUMBOARD APP] ADD LABEL';\nexport const RENAME_LIST = '[SCRUMBOARD APP] RENAME LIST';\nexport const REMOVE_LIST = '[SCRUMBOARD APP] REMOVE LIST';\n\nexport function getBoard(params) {\n\n    console.log(params);\n    let ref = firebaseService.db.ref('board/' + params.boardId);\n\n    return dispatch =>\n        ref\n        .once('value')\n        .then(snapshot => {\n            let contacts = snapshot.val();\n            return dispatch({\n                type: GET_BOARD,\n                payload: contacts\n            })\n\n        });\n\n    // const request = axios.get('/api/scrumboard-app/board', { params });\n\n    // return dispatch =>\n    // \trequest.then(\n    // \t\tresponse =>\n    // \t\t\tdispatch({\n    // \t\t\t\ttype: GET_BOARD,\n    // \t\t\t\tpayload: response.data\n    // \t\t\t}),\n    // \t\terror => {\n    // \t\t\tdispatch(\n    // \t\t\t\tshowMessage({\n    // \t\t\t\t\tmessage: error.response.data,\n    // \t\t\t\t\tautoHideDuration: 2000,\n    // \t\t\t\t\tanchorOrigin: {\n    // \t\t\t\t\t\tvertical: 'top',\n    // \t\t\t\t\t\thorizontal: 'right'\n    // \t\t\t\t\t}\n    // \t\t\t\t})\n    // \t\t\t);\n    // \t\t\thistory.push({\n    // \t\t\t\tpathname: '/apps/scrumboard/boards'\n    // \t\t\t});\n    // \t\t}\n    // \t);\n}\n\nexport function resetBoard() {\n    return {\n        type: RESET_BOARD\n    };\n}\n\nexport function reorderList(result) {\n    return (dispatch, getState) => {\n        const { board } = getState().scrumboardApp;\n        const { lists } = board;\n\n        const ordered = reorder(lists, result.source.index, result.destination.index);\n\n        const request = axios.post('/api/scrumboard-app/list/order', {\n            boardId: board.id,\n            lists: ordered\n        });\n\n        request.then(response => {\n            dispatch(\n                showMessage({\n                    message: 'List Order Saved',\n                    autoHideDuration: 2000,\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right'\n                    }\n                })\n            );\n        });\n\n        return dispatch({\n            type: ORDER_LIST,\n            payload: ordered\n        });\n    };\n}\n\nexport function reorderCard(result) {\n    return (dispatch, getState) => {\n        const { board } = getState().scrumboardApp;\n        const { lists } = board;\n\n        const ordered = reorderQuoteMap(lists, result.source, result.destination);\n\n        const request = axios.post('/api/scrumboard-app/card/order', {\n            boardId: board.id,\n            lists: ordered\n        });\n\n        request.then(response => {\n            dispatch(\n                showMessage({\n                    message: 'Card Order Saved',\n                    autoHideDuration: 2000,\n                    anchorOrigin: {\n                        vertical: 'top',\n                        horizontal: 'right'\n                    }\n                })\n            );\n        });\n\n        return dispatch({\n            type: ORDER_CARD,\n            payload: ordered\n        });\n    };\n}\n\nexport function newCard(boardId, listId, cardTitle) {\n    const data = new CardModel({ name: cardTitle });\n\n    const request = axios.post('/api/scrumboard-app/card/new', {\n        boardId,\n        listId,\n        data\n    });\n    return dispatch =>\n        new Promise((resolve, reject) => {\n            request.then(response => {\n                resolve(response.data);\n                return dispatch({\n                    type: ADD_CARD,\n                    payload: response.data\n                });\n            });\n        });\n}\n\nexport function newList(boardId, listTitle) {\n    const data = new ListModel({ name: listTitle });\n\n    const request = axios.post('/api/scrumboard-app/list/new', {\n        boardId,\n        data\n    });\n\n    return dispatch =>\n        request.then(response =>\n            dispatch({\n                type: ADD_LIST,\n                payload: response.data\n            })\n        );\n}\n\nexport function renameList(boardId, listId, listTitle) {\n    const request = axios.post('/api/scrumboard-app/list/rename', {\n        boardId,\n        listId,\n        listTitle\n    });\n\n    return dispatch =>\n        request.then(response =>\n            dispatch({\n                type: RENAME_LIST,\n                listId,\n                listTitle\n            })\n        );\n}\n\nexport function removeList(boardId, listId) {\n    const request = axios.post('/api/scrumboard-app/list/remove', {\n        boardId,\n        listId\n    });\n\n    return dispatch =>\n        request.then(response =>\n            dispatch({\n                type: REMOVE_LIST,\n                listId\n            })\n        );\n}\n\nexport function addLabel(label) {\n    return dispatch => {\n        return dispatch({\n            type: ADD_LABEL,\n            payload: label\n        });\n    };\n}\n\nexport function changeBoardSettings(newSettings) {\n    return (dispatch, getState) => {\n        const { board } = getState().scrumboardApp;\n        const settings = _.merge(board.settings, newSettings);\n        const request = axios.post('/api/scrumboard-app/board/settings/update', {\n            boardId: board.id,\n            settings\n        });\n\n        return request.then(response =>\n            dispatch({\n                type: CHANGE_BOARD_SETTINGS,\n                payload: response.data\n            })\n        );\n    };\n}\n\nexport function deleteBoard(boardId) {\n    const request = axios.post('/api/scrumboard-app/board/delete', {\n        boardId\n    });\n\n    return dispatch =>\n        request.then(response => {\n            history.push({\n                pathname: '/apps/scrumboard/boards'\n            });\n\n            return dispatch({\n                type: DELETE_BOARD\n            });\n        });\n}\n\nexport function copyBoard(board) {\n    const newBoard = _.merge(board, {\n        id: FuseUtils.generateGUID(),\n        name: `${board.name} (Copied)`,\n        uri: `${board.uri}-copied`\n    });\n    return dispatch => {\n        dispatch(BoardsActions.newBoard(newBoard));\n        return { type: COPY_BOARD };\n    };\n}\n\nexport function renameBoard(boardId, boardTitle) {\n    const request = axios.post('/api/scrumboard-app/board/rename', {\n        boardId,\n        boardTitle\n    });\n\n    return dispatch =>\n        request.then(response =>\n            dispatch({\n                type: RENAME_BOARD,\n                boardTitle\n            })\n        );\n}"]},"metadata":{},"sourceType":"module"}