{"ast":null,"code":"import { getUserData } from 'app/contacts/store/actions/user.actions';\nimport axios from 'axios';\nimport firebaseService from 'app/services/firebaseService';\nexport var GET_CONTACTS = '[CONTACTS APP] GET CONTACTS';\nexport var SET_SEARCH_TEXT = '[CONTACTS APP] SET SEARCH TEXT';\nexport var TOGGLE_IN_SELECTED_CONTACTS = '[CONTACTS APP] TOGGLE IN SELECTED CONTACTS';\nexport var SELECT_ALL_CONTACTS = '[CONTACTS APP] SELECT ALL CONTACTS';\nexport var DESELECT_ALL_CONTACTS = '[CONTACTS APP] DESELECT ALL CONTACTS';\nexport var OPEN_NEW_CONTACT_DIALOG = '[CONTACTS APP] OPEN NEW CONTACT DIALOG';\nexport var CLOSE_NEW_CONTACT_DIALOG = '[CONTACTS APP] CLOSE NEW CONTACT DIALOG';\nexport var OPEN_EDIT_CONTACT_DIALOG = '[CONTACTS APP] OPEN EDIT CONTACT DIALOG';\nexport var CLOSE_EDIT_CONTACT_DIALOG = '[CONTACTS APP] CLOSE EDIT CONTACT DIALOG';\nexport var ADD_CONTACT = '[CONTACTS APP] ADD CONTACT';\nexport var UPDATE_CONTACT = '[CONTACTS APP] UPDATE CONTACT';\nexport var REMOVE_CONTACT = '[CONTACTS APP] REMOVE CONTACT';\nexport var REMOVE_CONTACTS = '[CONTACTS APP] REMOVE CONTACTS';\nexport var TOGGLE_STARRED_CONTACT = '[CONTACTS APP] TOGGLE STARRED CONTACT';\nexport var TOGGLE_STARRED_CONTACTS = '[CONTACTS APP] TOGGLE STARRED CONTACTS';\nexport var SET_CONTACTS_STARRED = '[CONTACTS APP] SET CONTACTS STARRED ';\nimport _ from '@lodash';\nexport function getContacts(routeParams) {\n  return function (dispatch, getState) {\n    firebaseService.db.ref(\"contacts\").once('value').then(function (snapshot) {\n      var contacts = snapshot.val(); //contacts.forEach((o,i)=>o.id=i);\n\n      console.log(contacts);\n      console.log(_.keyBy(contacts, 'id'));\n      return dispatch({\n        type: GET_CONTACTS,\n        payload: contacts,\n        routeParams: routeParams\n      });\n    });\n  };\n}\nexport function setSearchText(event) {\n  return {\n    type: SET_SEARCH_TEXT,\n    searchText: event.target.value\n  };\n}\nexport function toggleInSelectedContacts(contactId) {\n  return {\n    type: TOGGLE_IN_SELECTED_CONTACTS,\n    contactId: contactId\n  };\n}\nexport function selectAllContacts() {\n  return {\n    type: SELECT_ALL_CONTACTS\n  };\n}\nexport function deSelectAllContacts() {\n  return {\n    type: DESELECT_ALL_CONTACTS\n  };\n}\nexport function openNewContactDialog() {\n  return {\n    type: OPEN_NEW_CONTACT_DIALOG\n  };\n}\nexport function closeNewContactDialog() {\n  return {\n    type: CLOSE_NEW_CONTACT_DIALOG\n  };\n}\nexport function openEditContactDialog(data) {\n  return {\n    type: OPEN_EDIT_CONTACT_DIALOG,\n    data: data\n  };\n}\nexport function closeEditContactDialog() {\n  return {\n    type: CLOSE_EDIT_CONTACT_DIALOG\n  };\n}\nexport function addContact(newContact) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    firebaseService.db.ref(\"contacts\").push(newContact).then(function (snapshot) {\n      Promise.all([dispatch({\n        type: ADD_CONTACT\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function updateContact(contact) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    console.log(contact); // firebaseService.db.ref('contacts').child(id).update(data).then(() => {\n    //      return {};\n    //    }).catch(error => {\n    //      return {\n    //        errorCode: error.code,\n    //        errorMessage: error.message\n    //      }\n    //    });\n    // const request = axios.post('/api/contacts-app/update-contact', {\n    // \tcontact\n    // });\n    // return request.then(response =>\n    // \tPromise.all([\n    // \t\tdispatch({\n    // \t\t\ttype: UPDATE_CONTACT\n    // \t\t})\n    // \t]).then(() => dispatch(getContacts(routeParams)))\n    // );\n  };\n}\nexport function removeContact(contactId) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/remove-contact', {\n      contactId: contactId\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: REMOVE_CONTACT\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function removeContacts(contactIds) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/remove-contacts', {\n      contactIds: contactIds\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: REMOVE_CONTACTS\n      }), dispatch({\n        type: DESELECT_ALL_CONTACTS\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function toggleStarredContact(contactId) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/toggle-starred-contact', {\n      contactId: contactId\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: TOGGLE_STARRED_CONTACT\n      }), dispatch(getUserData())]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function toggleStarredContacts(contactIds) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/toggle-starred-contacts', {\n      contactIds: contactIds\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: TOGGLE_STARRED_CONTACTS\n      }), dispatch({\n        type: DESELECT_ALL_CONTACTS\n      }), dispatch(getUserData())]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function setContactsStarred(contactIds) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/set-contacts-starred', {\n      contactIds: contactIds\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: SET_CONTACTS_STARRED\n      }), dispatch({\n        type: DESELECT_ALL_CONTACTS\n      }), dispatch(getUserData())]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function setContactsUnstarred(contactIds) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/set-contacts-unstarred', {\n      contactIds: contactIds\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: SET_CONTACTS_STARRED\n      }), dispatch({\n        type: DESELECT_ALL_CONTACTS\n      }), dispatch(getUserData())]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/msumaran/Documents/Proyectos/masternativos/src/app/contacts/store/actions/contacts.actions.js"],"names":["getUserData","axios","firebaseService","GET_CONTACTS","SET_SEARCH_TEXT","TOGGLE_IN_SELECTED_CONTACTS","SELECT_ALL_CONTACTS","DESELECT_ALL_CONTACTS","OPEN_NEW_CONTACT_DIALOG","CLOSE_NEW_CONTACT_DIALOG","OPEN_EDIT_CONTACT_DIALOG","CLOSE_EDIT_CONTACT_DIALOG","ADD_CONTACT","UPDATE_CONTACT","REMOVE_CONTACT","REMOVE_CONTACTS","TOGGLE_STARRED_CONTACT","TOGGLE_STARRED_CONTACTS","SET_CONTACTS_STARRED","_","getContacts","routeParams","dispatch","getState","db","ref","once","then","snapshot","contacts","val","console","log","keyBy","type","payload","setSearchText","event","searchText","target","value","toggleInSelectedContacts","contactId","selectAllContacts","deSelectAllContacts","openNewContactDialog","closeNewContactDialog","openEditContactDialog","data","closeEditContactDialog","addContact","newContact","contactsApp","push","Promise","all","updateContact","contact","removeContact","request","post","response","removeContacts","contactIds","toggleStarredContact","toggleStarredContacts","setContactsStarred","setContactsUnstarred"],"mappings":"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","sourcesContent":["import { getUserData } from 'app/contacts/store/actions/user.actions';\nimport axios from 'axios';\nimport firebaseService from 'app/services/firebaseService';\nexport const GET_CONTACTS = '[CONTACTS APP] GET CONTACTS';\nexport const SET_SEARCH_TEXT = '[CONTACTS APP] SET SEARCH TEXT';\nexport const TOGGLE_IN_SELECTED_CONTACTS = '[CONTACTS APP] TOGGLE IN SELECTED CONTACTS';\nexport const SELECT_ALL_CONTACTS = '[CONTACTS APP] SELECT ALL CONTACTS';\nexport const DESELECT_ALL_CONTACTS = '[CONTACTS APP] DESELECT ALL CONTACTS';\nexport const OPEN_NEW_CONTACT_DIALOG = '[CONTACTS APP] OPEN NEW CONTACT DIALOG';\nexport const CLOSE_NEW_CONTACT_DIALOG = '[CONTACTS APP] CLOSE NEW CONTACT DIALOG';\nexport const OPEN_EDIT_CONTACT_DIALOG = '[CONTACTS APP] OPEN EDIT CONTACT DIALOG';\nexport const CLOSE_EDIT_CONTACT_DIALOG = '[CONTACTS APP] CLOSE EDIT CONTACT DIALOG';\nexport const ADD_CONTACT = '[CONTACTS APP] ADD CONTACT';\nexport const UPDATE_CONTACT = '[CONTACTS APP] UPDATE CONTACT';\nexport const REMOVE_CONTACT = '[CONTACTS APP] REMOVE CONTACT';\nexport const REMOVE_CONTACTS = '[CONTACTS APP] REMOVE CONTACTS';\nexport const TOGGLE_STARRED_CONTACT = '[CONTACTS APP] TOGGLE STARRED CONTACT';\nexport const TOGGLE_STARRED_CONTACTS = '[CONTACTS APP] TOGGLE STARRED CONTACTS';\nexport const SET_CONTACTS_STARRED = '[CONTACTS APP] SET CONTACTS STARRED ';\nimport _ from '@lodash';\nexport function getContacts(routeParams) {\n\treturn (dispatch, getState) => {\n\t\tfirebaseService.db\n\t\t.ref(`contacts`)\n\t\t.once('value')\n\t\t.then(snapshot => {\n\t\t\tconst contacts = snapshot.val();\n\t\t\t//contacts.forEach((o,i)=>o.id=i);\n\n\n\t\t\tconsole.log(contacts);\n\t\t\tconsole.log(_.keyBy(contacts, 'id'));\n\t\t\t\n\t\t\treturn dispatch({\n\t\t\t\t\ttype: GET_CONTACTS,\n\t\t\t\t\tpayload: contacts,\n\t\t\t\t\trouteParams\n\t\t\t\t})\n\t\t\n\t\t});\t\n\t}\n}\n\nexport function setSearchText(event) {\n\treturn {\n\t\ttype: SET_SEARCH_TEXT,\n\t\tsearchText: event.target.value\n\t};\n}\n\nexport function toggleInSelectedContacts(contactId) {\n\treturn {\n\t\ttype: TOGGLE_IN_SELECTED_CONTACTS,\n\t\tcontactId\n\t};\n}\n\nexport function selectAllContacts() {\n\treturn {\n\t\ttype: SELECT_ALL_CONTACTS\n\t};\n}\n\nexport function deSelectAllContacts() {\n\treturn {\n\t\ttype: DESELECT_ALL_CONTACTS\n\t};\n}\n\nexport function openNewContactDialog() {\n\treturn {\n\t\ttype: OPEN_NEW_CONTACT_DIALOG\n\t};\n}\n\nexport function closeNewContactDialog() {\n\treturn {\n\t\ttype: CLOSE_NEW_CONTACT_DIALOG\n\t};\n}\n\nexport function openEditContactDialog(data) {\n\treturn {\n\t\ttype: OPEN_EDIT_CONTACT_DIALOG,\n\t\tdata\n\t};\n}\n\nexport function closeEditContactDialog() {\n\treturn {\n\t\ttype: CLOSE_EDIT_CONTACT_DIALOG\n\t};\n}\n\nexport function addContact(newContact) {\n\treturn (dispatch, getState) => {\n\t\tconst { routeParams } = getState().contactsApp.contacts;\n\t\tfirebaseService.db.ref(`contacts`)\n\t\t.push(newContact)\n\t\t.then(snapshot => {\n\t\t\t\tPromise.all([\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: ADD_CONTACT\n\t\t\t\t\t})\n\t\t\t\t]).then(() => dispatch(getContacts(routeParams)));\n\t\t});\t\n\t};\n}\n\nexport function updateContact(contact) {\n\treturn (dispatch, getState) => {\n\t\tconst { routeParams } = getState().contactsApp.contacts;\n\n\tconsole.log(contact);\n\t// firebaseService.db.ref('contacts').child(id).update(data).then(() => {\n //      return {};\n //    }).catch(error => {\n //      return {\n //        errorCode: error.code,\n //        errorMessage: error.message\n //      }\n //    });\n\n\t\t// const request = axios.post('/api/contacts-app/update-contact', {\n\t\t// \tcontact\n\t\t// });\n\n\t\t// return request.then(response =>\n\t\t// \tPromise.all([\n\t\t// \t\tdispatch({\n\t\t// \t\t\ttype: UPDATE_CONTACT\n\t\t// \t\t})\n\t\t// \t]).then(() => dispatch(getContacts(routeParams)))\n\t\t// );\n\t};\n}\n\nexport function removeContact(contactId) {\n\treturn (dispatch, getState) => {\n\t\tconst { routeParams } = getState().contactsApp.contacts;\n\n\t\tconst request = axios.post('/api/contacts-app/remove-contact', {\n\t\t\tcontactId\n\t\t});\n\n\t\treturn request.then(response =>\n\t\t\tPromise.all([\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: REMOVE_CONTACT\n\t\t\t\t})\n\t\t\t]).then(() => dispatch(getContacts(routeParams)))\n\t\t);\n\t};\n}\n\nexport function removeContacts(contactIds) {\n\treturn (dispatch, getState) => {\n\t\tconst { routeParams } = getState().contactsApp.contacts;\n\n\t\tconst request = axios.post('/api/contacts-app/remove-contacts', {\n\t\t\tcontactIds\n\t\t});\n\n\t\treturn request.then(response =>\n\t\t\tPromise.all([\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: REMOVE_CONTACTS\n\t\t\t\t}),\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: DESELECT_ALL_CONTACTS\n\t\t\t\t})\n\t\t\t]).then(() => dispatch(getContacts(routeParams)))\n\t\t);\n\t};\n}\n\nexport function toggleStarredContact(contactId) {\n\treturn (dispatch, getState) => {\n\t\tconst { routeParams } = getState().contactsApp.contacts;\n\n\t\tconst request = axios.post('/api/contacts-app/toggle-starred-contact', {\n\t\t\tcontactId\n\t\t});\n\n\t\treturn request.then(response =>\n\t\t\tPromise.all([\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: TOGGLE_STARRED_CONTACT\n\t\t\t\t}),\n\t\t\t\tdispatch(getUserData())\n\t\t\t]).then(() => dispatch(getContacts(routeParams)))\n\t\t);\n\t};\n}\n\nexport function toggleStarredContacts(contactIds) {\n\treturn (dispatch, getState) => {\n\t\tconst { routeParams } = getState().contactsApp.contacts;\n\n\t\tconst request = axios.post('/api/contacts-app/toggle-starred-contacts', {\n\t\t\tcontactIds\n\t\t});\n\n\t\treturn request.then(response =>\n\t\t\tPromise.all([\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: TOGGLE_STARRED_CONTACTS\n\t\t\t\t}),\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: DESELECT_ALL_CONTACTS\n\t\t\t\t}),\n\t\t\t\tdispatch(getUserData())\n\t\t\t]).then(() => dispatch(getContacts(routeParams)))\n\t\t);\n\t};\n}\n\nexport function setContactsStarred(contactIds) {\n\treturn (dispatch, getState) => {\n\t\tconst { routeParams } = getState().contactsApp.contacts;\n\n\t\tconst request = axios.post('/api/contacts-app/set-contacts-starred', {\n\t\t\tcontactIds\n\t\t});\n\n\t\treturn request.then(response =>\n\t\t\tPromise.all([\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: SET_CONTACTS_STARRED\n\t\t\t\t}),\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: DESELECT_ALL_CONTACTS\n\t\t\t\t}),\n\t\t\t\tdispatch(getUserData())\n\t\t\t]).then(() => dispatch(getContacts(routeParams)))\n\t\t);\n\t};\n}\n\nexport function setContactsUnstarred(contactIds) {\n\treturn (dispatch, getState) => {\n\t\tconst { routeParams } = getState().contactsApp.contacts;\n\n\t\tconst request = axios.post('/api/contacts-app/set-contacts-unstarred', {\n\t\t\tcontactIds\n\t\t});\n\n\t\treturn request.then(response =>\n\t\t\tPromise.all([\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: SET_CONTACTS_STARRED\n\t\t\t\t}),\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: DESELECT_ALL_CONTACTS\n\t\t\t\t}),\n\t\t\t\tdispatch(getUserData())\n\t\t\t]).then(() => dispatch(getContacts(routeParams)))\n\t\t);\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}