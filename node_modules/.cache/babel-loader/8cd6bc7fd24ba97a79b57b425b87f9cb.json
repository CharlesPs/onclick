{"ast":null,"code":"import _ from '@lodash'; // a little function to help us with reordering the result\n\nvar reorder = function reorder(list, startIndex, endIndex) {\n  //let result = Array.from(list);\n  var result = _.toArray(list); //const [removed] = result.splice(startIndex, 1);\n  //result.splice(endIndex, 0, removed);\n  //result = _.toArray(result);\n\n\n  console.log(result);\n  return result;\n};\n\nexport default reorder;\nexport var reorderQuoteMap = function reorderQuoteMap(lists, source, destination) {\n  var current = _.find(lists, {\n    id: source.droppableId\n  });\n\n  var next = _.find(lists, {\n    id: destination.droppableId\n  });\n\n  var target = current.cards[source.index]; // moving to same list\n\n  if (source.droppableId === destination.droppableId) {\n    var reordered = reorder(current.cards, source.index, destination.index);\n    return lists.map(function (list) {\n      if (list.id === source.droppableId) {\n        list.cards = reordered;\n      }\n\n      return list;\n    });\n  } // moving to different list\n  // remove from original\n\n\n  current.cards.splice(source.index, 1); // insert into next\n\n  next.cards.splice(destination.index, 0, target);\n  return lists.map(function (list) {\n    if (list.id === source.droppableId) {\n      return current;\n    }\n\n    if (list.id === destination.droppableId) {\n      return next;\n    }\n\n    return list;\n  });\n};","map":{"version":3,"sources":["/Users/msumaran/Documents/Proyectos/masternativos/src/app/scrumboard/store/actions/reorder.js"],"names":["_","reorder","list","startIndex","endIndex","result","toArray","console","log","reorderQuoteMap","lists","source","destination","current","find","id","droppableId","next","target","cards","index","reordered","map","splice"],"mappings":"AAAA,OAAOA,CAAP,MAAc,SAAd,C,CAEA;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,EAAgC;AAE/C;AACA,MAAIC,MAAM,GAAGL,CAAC,CAACM,OAAF,CAAUJ,IAAV,CAAb,CAH+C,CAI/C;AACA;AACA;;;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,SAAOA,MAAP;AACA,CATD;;AAWA,eAAeJ,OAAf;AAEA,OAAO,IAAMQ,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,MAAR,EAAgBC,WAAhB,EAAgC;AAC9D,MAAMC,OAAO,GAAGb,CAAC,CAACc,IAAF,CAAOJ,KAAP,EAAc;AAAEK,IAAAA,EAAE,EAAEJ,MAAM,CAACK;AAAb,GAAd,CAAhB;;AACA,MAAMC,IAAI,GAAGjB,CAAC,CAACc,IAAF,CAAOJ,KAAP,EAAc;AAAEK,IAAAA,EAAE,EAAEH,WAAW,CAACI;AAAlB,GAAd,CAAb;;AACA,MAAME,MAAM,GAAGL,OAAO,CAACM,KAAR,CAAcR,MAAM,CAACS,KAArB,CAAf,CAH8D,CAK9D;;AACA,MAAIT,MAAM,CAACK,WAAP,KAAuBJ,WAAW,CAACI,WAAvC,EAAoD;AACnD,QAAMK,SAAS,GAAGpB,OAAO,CAACY,OAAO,CAACM,KAAT,EAAgBR,MAAM,CAACS,KAAvB,EAA8BR,WAAW,CAACQ,KAA1C,CAAzB;AACA,WAAOV,KAAK,CAACY,GAAN,CAAU,UAAApB,IAAI,EAAI;AACxB,UAAIA,IAAI,CAACa,EAAL,KAAYJ,MAAM,CAACK,WAAvB,EAAoC;AACnCd,QAAAA,IAAI,CAACiB,KAAL,GAAaE,SAAb;AACA;;AAED,aAAOnB,IAAP;AACA,KANM,CAAP;AAOA,GAf6D,CAiB9D;AAEA;;;AACAW,EAAAA,OAAO,CAACM,KAAR,CAAcI,MAAd,CAAqBZ,MAAM,CAACS,KAA5B,EAAmC,CAAnC,EApB8D,CAqB9D;;AACAH,EAAAA,IAAI,CAACE,KAAL,CAAWI,MAAX,CAAkBX,WAAW,CAACQ,KAA9B,EAAqC,CAArC,EAAwCF,MAAxC;AAEA,SAAOR,KAAK,CAACY,GAAN,CAAU,UAAApB,IAAI,EAAI;AACxB,QAAIA,IAAI,CAACa,EAAL,KAAYJ,MAAM,CAACK,WAAvB,EAAoC;AACnC,aAAOH,OAAP;AACA;;AACD,QAAIX,IAAI,CAACa,EAAL,KAAYH,WAAW,CAACI,WAA5B,EAAyC;AACxC,aAAOC,IAAP;AACA;;AACD,WAAOf,IAAP;AACA,GARM,CAAP;AASA,CAjCM","sourcesContent":["import _ from '@lodash';\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n\n\t//let result = Array.from(list);\n\tlet result = _.toArray(list);\n\t//const [removed] = result.splice(startIndex, 1);\n\t//result.splice(endIndex, 0, removed);\n\t//result = _.toArray(result);\n\tconsole.log(result);\n\treturn result;\n};\n\nexport default reorder;\n\nexport const reorderQuoteMap = (lists, source, destination) => {\n\tconst current = _.find(lists, { id: source.droppableId });\n\tconst next = _.find(lists, { id: destination.droppableId });\n\tconst target = current.cards[source.index];\n\n\t// moving to same list\n\tif (source.droppableId === destination.droppableId) {\n\t\tconst reordered = reorder(current.cards, source.index, destination.index);\n\t\treturn lists.map(list => {\n\t\t\tif (list.id === source.droppableId) {\n\t\t\t\tlist.cards = reordered;\n\t\t\t}\n\t\t\t\n\t\t\treturn list;\n\t\t});\n\t}\n\n\t// moving to different list\n\n\t// remove from original\n\tcurrent.cards.splice(source.index, 1);\n\t// insert into next\n\tnext.cards.splice(destination.index, 0, target);\n\n\treturn lists.map(list => {\n\t\tif (list.id === source.droppableId) {\n\t\t\treturn current;\n\t\t}\n\t\tif (list.id === destination.droppableId) {\n\t\t\treturn next;\n\t\t}\n\t\treturn list;\n\t});\n};\n"]},"metadata":{},"sourceType":"module"}