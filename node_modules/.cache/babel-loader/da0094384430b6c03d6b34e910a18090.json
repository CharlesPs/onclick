{"ast":null,"code":"import FuseUtils from '@fuse/utils';\nimport history from '@history';\nimport firebaseService from 'app/services/firebaseService';\nimport _ from '@lodash';\nimport axios from 'axios';\nimport CardModel from '../../model/CardModel';\nimport ListModel from '../../model/ListModel';\nimport * as BoardsActions from './boards.actions';\nimport reorder, { reorderQuoteMap } from './reorder';\nexport var GET_BOARD = '[SCRUMBOARD APP] GET BOARD';\nexport var DELETE_BOARD = '[SCRUMBOARD APP] DELETE BOARD';\nexport var COPY_BOARD = '[SCRUMBOARD APP] COPY BOARD';\nexport var RENAME_BOARD = '[SCRUMBOARD APP] RENAME BOARD';\nexport var CHANGE_BOARD_SETTINGS = '[SCRUMBOARD APP] CHANGE BOARD SETTINGS';\nexport var RESET_BOARD = '[SCRUMBOARD APP] RESET BOARD';\nexport var ORDER_LIST = '[SCRUMBOARD APP] ORDER LIST';\nexport var ORDER_CARD = '[SCRUMBOARD APP] ORDER CARD';\nexport var ADD_CARD = '[SCRUMBOARD APP] ADD CARD';\nexport var ADD_LIST = '[SCRUMBOARD APP] ADD LIST';\nexport var ADD_LABEL = '[SCRUMBOARD APP] ADD LABEL';\nexport var RENAME_LIST = '[SCRUMBOARD APP] RENAME LIST';\nexport var REMOVE_LIST = '[SCRUMBOARD APP] REMOVE LIST';\nexport function getBoard(params) {\n  var ref = firebaseService.db.ref('board/' + params.boardId);\n  return function (dispatch) {\n    return ref.once('value').then(function (snapshot) {\n      var board = snapshot.val();\n      if (board == null) return;\n      board.id = params.boardId;\n      return dispatch({\n        type: GET_BOARD,\n        payload: board\n      });\n    });\n  };\n}\nexport function resetBoard() {\n  return {\n    type: RESET_BOARD\n  };\n}\nexport function reorderList(result) {\n  return function (dispatch, getState) {\n    var board = getState().scrumboardApp.board;\n    var lists = board.lists;\n    var ordered = reorder(lists, result.source.index, result.destination.index);\n    board.lists.map(function (list) {\n      list.cards = _.keyBy(list.cards, 'id');\n      list.cards = _.toArray(list.cards);\n    });\n    board.lists = _.toArray(board.lists);\n    board.lists = _.keyBy(board.lists, 'id');\n    firebaseService.db.ref(\"board/\".concat(board.id)).update(board).then(function () {\n      board.lists = ordered;\n      return dispatch(getBoard({\n        boardId: board.id\n      }));\n    }); // console.log(board.lists);\n    // return true;\n    // firebaseService.db.ref(`board/${board.id}/lists`).remove().then(() => {\n    //     let promises = [];\n    //     ordered.map((item) => {\n    //         return promises.push(firebaseService.db.ref('board/' + board.id + '/lists').push(item));\n    //     });\n    //     Promise.all(promises).then(result => {\n    //         return dispatch(getBoard({ boardId: board.id }));\n    //     });\n    // });\n  };\n}\nexport function reorderCard(result) {\n  return function (dispatch, getState) {\n    var board = getState().scrumboardApp.board;\n    var lists = board.lists;\n    var ordered = reorderQuoteMap(lists, result.source, result.destination);\n    board.lists.map(function (list) {\n      list.cards = _.keyBy(list.cards, 'id');\n      list.cards = _.toArray(list.cards);\n    });\n    board.lists = _.toArray(board.lists);\n    board.lists = _.keyBy(board.lists, 'id');\n    firebaseService.db.ref(\"board/\".concat(board.id)).update(board).then(function () {\n      return dispatch(getBoard({\n        boardId: board.id\n      }));\n    });\n  };\n}\nexport function newCard(boardId, listId, cardTitle) {\n  var data = new CardModel({\n    name: cardTitle\n  });\n  console.log(data);\n  return function (dispatch) {\n    return firebaseService.db.ref(\"board/\".concat(boardId, \"/lists/\").concat(listId, \"/cards\")).push(data).then(function (snapshot) {\n      dispatch(getBoard({\n        boardId: boardId\n      }));\n    });\n  }; // const request = axios.post('/api/scrumboard-app/card/new', {\n  //     boardId,\n  //     listId,\n  //     data\n  // });\n  // return dispatch =>\n  //     new Promise((resolve, reject) => {\n  //         request.then(response => {\n  //             resolve(response.data);\n  //             return dispatch({\n  //                 type: ADD_CARD,\n  //                 payload: response.data\n  //             });\n  //         });\n  //     });\n}\nexport function newList(boardId, listTitle) {\n  var data = new ListModel({\n    name: listTitle\n  });\n  return function (dispatch) {\n    return firebaseService.db.ref('board/' + boardId + '/lists').push(data).then(function (snapshot) {\n      dispatch(getBoard({\n        boardId: boardId\n      }));\n    });\n  };\n}\nexport function renameList(boardId, listId, listTitle) {\n  return function (dispatch, getState) {\n    firebaseService.db.ref(\"board/\".concat(boardId, \"/lists/\").concat(listId)).update({\n      name: listTitle\n    }).then(function () {\n      Promise.all([dispatch({\n        type: RENAME_LIST,\n        listId: listId,\n        listTitle: listTitle\n      })]).then(function () {\n        return dispatch(getBoard({\n          boardId: boardId\n        }));\n      });\n    }).catch(function (error) {\n      return {\n        errorCode: error.code,\n        errorMessage: error.message\n      };\n    });\n  };\n}\nexport function removeList(boardId, listId) {\n  return function (dispatch) {\n    return firebaseService.db.ref(\"board/\".concat(boardId, \"/lists/\").concat(listId)).remove().then(function () {\n      Promise.all([dispatch({\n        type: REMOVE_LIST\n      })]).then(function () {\n        return dispatch(getBoard({\n          boardId: boardId\n        }));\n      });\n    }).catch(function (error) {\n      return {\n        errorCode: error.code,\n        errorMessage: error.message\n      };\n    });\n  };\n}\nexport function addLabel(label) {\n  return function (dispatch) {\n    return dispatch({\n      type: ADD_LABEL,\n      payload: label\n    });\n  };\n}\nexport function changeBoardSettings(newSettings) {\n  return function (dispatch, getState) {\n    var board = getState().scrumboardApp.board;\n\n    var settings = _.merge(board.settings, newSettings);\n\n    var request = axios.post('/api/scrumboard-app/board/settings/update', {\n      boardId: board.id,\n      settings: settings\n    });\n    return request.then(function (response) {\n      return dispatch({\n        type: CHANGE_BOARD_SETTINGS,\n        payload: response.data\n      });\n    });\n  };\n}\nexport function deleteBoard(boardId) {\n  var request = axios.post('/api/scrumboard-app/board/delete', {\n    boardId: boardId\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      history.push({\n        pathname: '/apps/scrumboard/boards'\n      });\n      return dispatch({\n        type: DELETE_BOARD\n      });\n    });\n  };\n}\nexport function copyBoard(board) {\n  var newBoard = _.merge(board, {\n    id: FuseUtils.generateGUID(),\n    name: \"\".concat(board.name, \" (Copied)\"),\n    uri: \"\".concat(board.uri, \"-copied\")\n  });\n\n  return function (dispatch) {\n    dispatch(BoardsActions.newBoard(newBoard));\n    return {\n      type: COPY_BOARD\n    };\n  };\n}\nexport function renameBoard(boardId, boardTitle) {\n  return function (dispatch, getState) {\n    firebaseService.db.ref(\"board/\".concat(boardId)).update({\n      name: boardTitle\n    }).then(function () {\n      Promise.all([dispatch({\n        type: RENAME_BOARD,\n        boardTitle: boardTitle\n      })]).then(function () {\n        return dispatch(getBoard({\n          boardId: boardId\n        }));\n      });\n    }).catch(function (error) {\n      return {\n        errorCode: error.code,\n        errorMessage: error.message\n      };\n    });\n  };\n}","map":{"version":3,"sources":["/Users/msumaran/Documents/Proyectos/masternativos/src/app/scrumboard/store/actions/board.actions.js"],"names":["FuseUtils","history","firebaseService","_","axios","CardModel","ListModel","BoardsActions","reorder","reorderQuoteMap","GET_BOARD","DELETE_BOARD","COPY_BOARD","RENAME_BOARD","CHANGE_BOARD_SETTINGS","RESET_BOARD","ORDER_LIST","ORDER_CARD","ADD_CARD","ADD_LIST","ADD_LABEL","RENAME_LIST","REMOVE_LIST","getBoard","params","ref","db","boardId","dispatch","once","then","snapshot","board","val","id","type","payload","resetBoard","reorderList","result","getState","scrumboardApp","lists","ordered","source","index","destination","map","list","cards","keyBy","toArray","update","reorderCard","newCard","listId","cardTitle","data","name","console","log","push","newList","listTitle","renameList","Promise","all","catch","error","errorCode","code","errorMessage","message","removeList","remove","addLabel","label","changeBoardSettings","newSettings","settings","merge","request","post","response","deleteBoard","pathname","copyBoard","newBoard","generateGUID","uri","renameBoard","boardTitle"],"mappings":"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","sourcesContent":["import FuseUtils from '@fuse/utils';\nimport history from '@history';\nimport firebaseService from 'app/services/firebaseService';\nimport _ from '@lodash';\nimport axios from 'axios';\nimport CardModel from '../../model/CardModel';\nimport ListModel from '../../model/ListModel';\nimport * as BoardsActions from './boards.actions';\nimport reorder, { reorderQuoteMap } from './reorder';\n\n\nexport const GET_BOARD = '[SCRUMBOARD APP] GET BOARD';\nexport const DELETE_BOARD = '[SCRUMBOARD APP] DELETE BOARD';\nexport const COPY_BOARD = '[SCRUMBOARD APP] COPY BOARD';\nexport const RENAME_BOARD = '[SCRUMBOARD APP] RENAME BOARD';\nexport const CHANGE_BOARD_SETTINGS = '[SCRUMBOARD APP] CHANGE BOARD SETTINGS';\nexport const RESET_BOARD = '[SCRUMBOARD APP] RESET BOARD';\nexport const ORDER_LIST = '[SCRUMBOARD APP] ORDER LIST';\nexport const ORDER_CARD = '[SCRUMBOARD APP] ORDER CARD';\nexport const ADD_CARD = '[SCRUMBOARD APP] ADD CARD';\nexport const ADD_LIST = '[SCRUMBOARD APP] ADD LIST';\nexport const ADD_LABEL = '[SCRUMBOARD APP] ADD LABEL';\nexport const RENAME_LIST = '[SCRUMBOARD APP] RENAME LIST';\nexport const REMOVE_LIST = '[SCRUMBOARD APP] REMOVE LIST';\n\nexport function getBoard(params) {\n\n    let ref = firebaseService.db.ref('board/' + params.boardId);\n    return dispatch =>\n        ref\n        .once('value')\n        .then(snapshot => {\n\n            let board = snapshot.val();\n            if (board == null) return;\n            board.id = params.boardId;\n            return dispatch({\n                type: GET_BOARD,\n                payload: board\n            })\n\n        });\n\n}\n\nexport function resetBoard() {\n    return {\n        type: RESET_BOARD\n    };\n}\n\nexport function reorderList(result) {\n    return (dispatch, getState) => {\n        const { board } = getState().scrumboardApp;\n        const { lists } = board;\n\n        let ordered = reorder(lists, result.source.index, result.destination.index);\n\n        board.lists.map(list => {\n            list.cards = _.keyBy(list.cards, 'id');\n            list.cards = _.toArray(list.cards);\n        });\n        board.lists = _.toArray(board.lists);\n        board.lists = _.keyBy(board.lists, 'id');\n        firebaseService.db.ref(`board/${board.id}`).update(board).then(() => {\n            board.lists = ordered;\n            return dispatch(getBoard({ boardId: board.id }));\n        });\n\n\n        // console.log(board.lists);\n        // return true;\n        // firebaseService.db.ref(`board/${board.id}/lists`).remove().then(() => {\n        //     let promises = [];\n        //     ordered.map((item) => {\n        //         return promises.push(firebaseService.db.ref('board/' + board.id + '/lists').push(item));\n        //     });\n\n        //     Promise.all(promises).then(result => {\n        //         return dispatch(getBoard({ boardId: board.id }));\n        //     });\n\n        // });\n    };\n}\n\nexport function reorderCard(result) {\n    return (dispatch, getState) => {\n        const { board } = getState().scrumboardApp;\n        const { lists } = board;\n        const ordered = reorderQuoteMap(lists, result.source, result.destination);\n        board.lists.map(list => {\n            list.cards = _.keyBy(list.cards, 'id');\n            list.cards = _.toArray(list.cards);\n        });\n        board.lists = _.toArray(board.lists);\n        board.lists = _.keyBy(board.lists, 'id');\n        firebaseService.db.ref(`board/${board.id}`).update(board).then(() => {\n            return dispatch(getBoard({ boardId: board.id }));\n        });\n\n    }\n}\nexport function newCard(boardId, listId, cardTitle) {\n    const data = new CardModel({ name: cardTitle });\n\n    console.log(data);\n    return dispatch =>\n        firebaseService.db.ref(`board/${boardId}/lists/${listId}/cards`).push(data).then((snapshot) => {\n            dispatch(getBoard({ boardId: boardId }));\n        });\n\n\n    // const request = axios.post('/api/scrumboard-app/card/new', {\n    //     boardId,\n    //     listId,\n    //     data\n    // });\n    // return dispatch =>\n    //     new Promise((resolve, reject) => {\n    //         request.then(response => {\n    //             resolve(response.data);\n    //             return dispatch({\n    //                 type: ADD_CARD,\n    //                 payload: response.data\n    //             });\n    //         });\n    //     });\n}\n\nexport function newList(boardId, listTitle) {\n    const data = new ListModel({ name: listTitle });\n    return dispatch =>\n        firebaseService.db.ref('board/' + boardId + '/lists').push(data).then((snapshot) => {\n            dispatch(getBoard({ boardId: boardId }));\n        });\n\n}\n\nexport function renameList(boardId, listId, listTitle) {\n\n    return (dispatch, getState) => {\n        firebaseService.db.ref(`board/${boardId}/lists/${listId}`).update({ name: listTitle }).then(() => {\n            Promise.all([\n                dispatch({\n                    type: RENAME_LIST,\n                    listId,\n                    listTitle\n                })\n            ]).then(() => dispatch(getBoard({ boardId: boardId })));\n        }).catch(error => {\n            return {\n                errorCode: error.code,\n                errorMessage: error.message\n            }\n        });\n    };\n}\n\nexport function removeList(boardId, listId) {\n\n    return dispatch =>\n        firebaseService.db.ref(`board/${boardId}/lists/${listId}`).remove().then(() => {\n            Promise.all([\n                dispatch({\n                    type: REMOVE_LIST\n                })\n            ]).then(() => dispatch(getBoard({ boardId: boardId })));\n        }).catch(error => {\n            return {\n                errorCode: error.code,\n                errorMessage: error.message\n            }\n        });\n}\n\nexport function addLabel(label) {\n    return dispatch => {\n        return dispatch({\n            type: ADD_LABEL,\n            payload: label\n        });\n    };\n}\n\nexport function changeBoardSettings(newSettings) {\n    return (dispatch, getState) => {\n        const { board } = getState().scrumboardApp;\n        const settings = _.merge(board.settings, newSettings);\n        const request = axios.post('/api/scrumboard-app/board/settings/update', {\n            boardId: board.id,\n            settings\n        });\n\n        return request.then(response =>\n            dispatch({\n                type: CHANGE_BOARD_SETTINGS,\n                payload: response.data\n            })\n        );\n    };\n}\n\nexport function deleteBoard(boardId) {\n    const request = axios.post('/api/scrumboard-app/board/delete', {\n        boardId\n    });\n\n    return dispatch =>\n        request.then(response => {\n            history.push({\n                pathname: '/apps/scrumboard/boards'\n            });\n\n            return dispatch({\n                type: DELETE_BOARD\n            });\n        });\n}\n\nexport function copyBoard(board) {\n    const newBoard = _.merge(board, {\n        id: FuseUtils.generateGUID(),\n        name: `${board.name} (Copied)`,\n        uri: `${board.uri}-copied`\n    });\n    return dispatch => {\n        dispatch(BoardsActions.newBoard(newBoard));\n        return { type: COPY_BOARD };\n    };\n}\n\nexport function renameBoard(boardId, boardTitle) {\n    return (dispatch, getState) => {\n        firebaseService.db.ref(`board/${boardId}`).update({ name: boardTitle }).then(() => {\n            Promise.all([\n                dispatch({\n                    type: RENAME_BOARD,\n                    boardTitle\n                })\n            ]).then(() => dispatch(getBoard({ boardId: boardId })));\n        }).catch(error => {\n            return {\n                errorCode: error.code,\n                errorMessage: error.message\n            }\n        });\n    };\n\n\n}"]},"metadata":{},"sourceType":"module"}