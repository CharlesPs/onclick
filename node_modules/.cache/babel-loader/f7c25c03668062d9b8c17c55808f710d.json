{"ast":null,"code":"import { getUserData } from 'app/contacts/store/actions/user.actions';\nimport axios from 'axios';\nimport firebaseService from 'app/services/firebaseService';\nexport var GET_CONTACTS = '[CONTACTS APP] GET CONTACTS';\nexport var SET_SEARCH_TEXT = '[CONTACTS APP] SET SEARCH TEXT';\nexport var TOGGLE_IN_SELECTED_CONTACTS = '[CONTACTS APP] TOGGLE IN SELECTED CONTACTS';\nexport var SELECT_ALL_CONTACTS = '[CONTACTS APP] SELECT ALL CONTACTS';\nexport var DESELECT_ALL_CONTACTS = '[CONTACTS APP] DESELECT ALL CONTACTS';\nexport var OPEN_NEW_CONTACT_DIALOG = '[CONTACTS APP] OPEN NEW CONTACT DIALOG';\nexport var CLOSE_NEW_CONTACT_DIALOG = '[CONTACTS APP] CLOSE NEW CONTACT DIALOG';\nexport var OPEN_EDIT_CONTACT_DIALOG = '[CONTACTS APP] OPEN EDIT CONTACT DIALOG';\nexport var CLOSE_EDIT_CONTACT_DIALOG = '[CONTACTS APP] CLOSE EDIT CONTACT DIALOG';\nexport var ADD_CONTACT = '[CONTACTS APP] ADD CONTACT';\nexport var UPDATE_CONTACT = '[CONTACTS APP] UPDATE CONTACT';\nexport var REMOVE_CONTACT = '[CONTACTS APP] REMOVE CONTACT';\nexport var REMOVE_CONTACTS = '[CONTACTS APP] REMOVE CONTACTS';\nexport var TOGGLE_STARRED_CONTACT = '[CONTACTS APP] TOGGLE STARRED CONTACT';\nexport var TOGGLE_STARRED_CONTACTS = '[CONTACTS APP] TOGGLE STARRED CONTACTS';\nexport var SET_CONTACTS_STARRED = '[CONTACTS APP] SET CONTACTS STARRED ';\nexport function getContacts(routeParams) {\n  firebaseService.db.ref(\"contacts\").once('value').then(function (snapshot) {\n    var contacts = snapshot.val();\n    console.log(contacts);\n  });\n  var request = axios.get('/api/contacts-app/contacts', {\n    params: routeParams\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      return dispatch({\n        type: GET_CONTACTS,\n        payload: response.data,\n        routeParams: routeParams\n      });\n    });\n  };\n}\nexport function setSearchText(event) {\n  return {\n    type: SET_SEARCH_TEXT,\n    searchText: event.target.value\n  };\n}\nexport function toggleInSelectedContacts(contactId) {\n  return {\n    type: TOGGLE_IN_SELECTED_CONTACTS,\n    contactId: contactId\n  };\n}\nexport function selectAllContacts() {\n  return {\n    type: SELECT_ALL_CONTACTS\n  };\n}\nexport function deSelectAllContacts() {\n  return {\n    type: DESELECT_ALL_CONTACTS\n  };\n}\nexport function openNewContactDialog() {\n  return {\n    type: OPEN_NEW_CONTACT_DIALOG\n  };\n}\nexport function closeNewContactDialog() {\n  return {\n    type: CLOSE_NEW_CONTACT_DIALOG\n  };\n}\nexport function openEditContactDialog(data) {\n  return {\n    type: OPEN_EDIT_CONTACT_DIALOG,\n    data: data\n  };\n}\nexport function closeEditContactDialog() {\n  return {\n    type: CLOSE_EDIT_CONTACT_DIALOG\n  };\n}\nexport function addContact(newContact) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/add-contact', {\n      newContact: newContact\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: ADD_CONTACT\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function updateContact(contact) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/update-contact', {\n      contact: contact\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: UPDATE_CONTACT\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function removeContact(contactId) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/remove-contact', {\n      contactId: contactId\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: REMOVE_CONTACT\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function removeContacts(contactIds) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/remove-contacts', {\n      contactIds: contactIds\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: REMOVE_CONTACTS\n      }), dispatch({\n        type: DESELECT_ALL_CONTACTS\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function toggleStarredContact(contactId) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/toggle-starred-contact', {\n      contactId: contactId\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: TOGGLE_STARRED_CONTACT\n      }), dispatch(getUserData())]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function toggleStarredContacts(contactIds) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/toggle-starred-contacts', {\n      contactIds: contactIds\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: TOGGLE_STARRED_CONTACTS\n      }), dispatch({\n        type: DESELECT_ALL_CONTACTS\n      }), dispatch(getUserData())]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function setContactsStarred(contactIds) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/set-contacts-starred', {\n      contactIds: contactIds\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: SET_CONTACTS_STARRED\n      }), dispatch({\n        type: DESELECT_ALL_CONTACTS\n      }), dispatch(getUserData())]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function setContactsUnstarred(contactIds) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/set-contacts-unstarred', {\n      contactIds: contactIds\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: SET_CONTACTS_STARRED\n      }), dispatch({\n        type: DESELECT_ALL_CONTACTS\n      }), dispatch(getUserData())]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/msumaran/Documents/Proyectos/masternativos/src/app/contacts/store/actions/contacts.actions.js"],"names":["getUserData","axios","firebaseService","GET_CONTACTS","SET_SEARCH_TEXT","TOGGLE_IN_SELECTED_CONTACTS","SELECT_ALL_CONTACTS","DESELECT_ALL_CONTACTS","OPEN_NEW_CONTACT_DIALOG","CLOSE_NEW_CONTACT_DIALOG","OPEN_EDIT_CONTACT_DIALOG","CLOSE_EDIT_CONTACT_DIALOG","ADD_CONTACT","UPDATE_CONTACT","REMOVE_CONTACT","REMOVE_CONTACTS","TOGGLE_STARRED_CONTACT","TOGGLE_STARRED_CONTACTS","SET_CONTACTS_STARRED","getContacts","routeParams","db","ref","once","then","snapshot","contacts","val","console","log","request","get","params","dispatch","response","type","payload","data","setSearchText","event","searchText","target","value","toggleInSelectedContacts","contactId","selectAllContacts","deSelectAllContacts","openNewContactDialog","closeNewContactDialog","openEditContactDialog","closeEditContactDialog","addContact","newContact","getState","contactsApp","post","Promise","all","updateContact","contact","removeContact","removeContacts","contactIds","toggleStarredContact","toggleStarredContacts","setContactsStarred","setContactsUnstarred"],"mappings":"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","sourcesContent":["import { getUserData } from 'app/contacts/store/actions/user.actions';\nimport axios from 'axios';\nimport firebaseService from 'app/services/firebaseService';\nexport const GET_CONTACTS = '[CONTACTS APP] GET CONTACTS';\nexport const SET_SEARCH_TEXT = '[CONTACTS APP] SET SEARCH TEXT';\nexport const TOGGLE_IN_SELECTED_CONTACTS = '[CONTACTS APP] TOGGLE IN SELECTED CONTACTS';\nexport const SELECT_ALL_CONTACTS = '[CONTACTS APP] SELECT ALL CONTACTS';\nexport const DESELECT_ALL_CONTACTS = '[CONTACTS APP] DESELECT ALL CONTACTS';\nexport const OPEN_NEW_CONTACT_DIALOG = '[CONTACTS APP] OPEN NEW CONTACT DIALOG';\nexport const CLOSE_NEW_CONTACT_DIALOG = '[CONTACTS APP] CLOSE NEW CONTACT DIALOG';\nexport const OPEN_EDIT_CONTACT_DIALOG = '[CONTACTS APP] OPEN EDIT CONTACT DIALOG';\nexport const CLOSE_EDIT_CONTACT_DIALOG = '[CONTACTS APP] CLOSE EDIT CONTACT DIALOG';\nexport const ADD_CONTACT = '[CONTACTS APP] ADD CONTACT';\nexport const UPDATE_CONTACT = '[CONTACTS APP] UPDATE CONTACT';\nexport const REMOVE_CONTACT = '[CONTACTS APP] REMOVE CONTACT';\nexport const REMOVE_CONTACTS = '[CONTACTS APP] REMOVE CONTACTS';\nexport const TOGGLE_STARRED_CONTACT = '[CONTACTS APP] TOGGLE STARRED CONTACT';\nexport const TOGGLE_STARRED_CONTACTS = '[CONTACTS APP] TOGGLE STARRED CONTACTS';\nexport const SET_CONTACTS_STARRED = '[CONTACTS APP] SET CONTACTS STARRED ';\n\nexport function getContacts(routeParams) {\n\n\tfirebaseService.db\n\t\t\t\t.ref(`contacts`)\n\t\t\t\t.once('value')\n\t\t\t\t.then(snapshot => {\n\t\t\t\t\tconst contacts = snapshot.val();\n\t\t\t\t\tconsole.log(contacts);\n\t\t\t\t});\n\n\n\n\tconst request = axios.get('/api/contacts-app/contacts', {\n\t\tparams: routeParams\n\t});\n\n\treturn dispatch =>\n\t\trequest.then(response =>\n\t\t\tdispatch({\n\t\t\t\ttype: GET_CONTACTS,\n\t\t\t\tpayload: response.data,\n\t\t\t\trouteParams\n\t\t\t})\n\t\t);\n}\n\nexport function setSearchText(event) {\n\treturn {\n\t\ttype: SET_SEARCH_TEXT,\n\t\tsearchText: event.target.value\n\t};\n}\n\nexport function toggleInSelectedContacts(contactId) {\n\treturn {\n\t\ttype: TOGGLE_IN_SELECTED_CONTACTS,\n\t\tcontactId\n\t};\n}\n\nexport function selectAllContacts() {\n\treturn {\n\t\ttype: SELECT_ALL_CONTACTS\n\t};\n}\n\nexport function deSelectAllContacts() {\n\treturn {\n\t\ttype: DESELECT_ALL_CONTACTS\n\t};\n}\n\nexport function openNewContactDialog() {\n\treturn {\n\t\ttype: OPEN_NEW_CONTACT_DIALOG\n\t};\n}\n\nexport function closeNewContactDialog() {\n\treturn {\n\t\ttype: CLOSE_NEW_CONTACT_DIALOG\n\t};\n}\n\nexport function openEditContactDialog(data) {\n\treturn {\n\t\ttype: OPEN_EDIT_CONTACT_DIALOG,\n\t\tdata\n\t};\n}\n\nexport function closeEditContactDialog() {\n\treturn {\n\t\ttype: CLOSE_EDIT_CONTACT_DIALOG\n\t};\n}\n\nexport function addContact(newContact) {\n\treturn (dispatch, getState) => {\n\t\tconst { routeParams } = getState().contactsApp.contacts;\n\n\t\tconst request = axios.post('/api/contacts-app/add-contact', {\n\t\t\tnewContact\n\t\t});\n\n\t\treturn request.then(response =>\n\t\t\tPromise.all([\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: ADD_CONTACT\n\t\t\t\t})\n\t\t\t]).then(() => dispatch(getContacts(routeParams)))\n\t\t);\n\t};\n}\n\nexport function updateContact(contact) {\n\treturn (dispatch, getState) => {\n\t\tconst { routeParams } = getState().contactsApp.contacts;\n\n\t\tconst request = axios.post('/api/contacts-app/update-contact', {\n\t\t\tcontact\n\t\t});\n\n\t\treturn request.then(response =>\n\t\t\tPromise.all([\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_CONTACT\n\t\t\t\t})\n\t\t\t]).then(() => dispatch(getContacts(routeParams)))\n\t\t);\n\t};\n}\n\nexport function removeContact(contactId) {\n\treturn (dispatch, getState) => {\n\t\tconst { routeParams } = getState().contactsApp.contacts;\n\n\t\tconst request = axios.post('/api/contacts-app/remove-contact', {\n\t\t\tcontactId\n\t\t});\n\n\t\treturn request.then(response =>\n\t\t\tPromise.all([\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: REMOVE_CONTACT\n\t\t\t\t})\n\t\t\t]).then(() => dispatch(getContacts(routeParams)))\n\t\t);\n\t};\n}\n\nexport function removeContacts(contactIds) {\n\treturn (dispatch, getState) => {\n\t\tconst { routeParams } = getState().contactsApp.contacts;\n\n\t\tconst request = axios.post('/api/contacts-app/remove-contacts', {\n\t\t\tcontactIds\n\t\t});\n\n\t\treturn request.then(response =>\n\t\t\tPromise.all([\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: REMOVE_CONTACTS\n\t\t\t\t}),\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: DESELECT_ALL_CONTACTS\n\t\t\t\t})\n\t\t\t]).then(() => dispatch(getContacts(routeParams)))\n\t\t);\n\t};\n}\n\nexport function toggleStarredContact(contactId) {\n\treturn (dispatch, getState) => {\n\t\tconst { routeParams } = getState().contactsApp.contacts;\n\n\t\tconst request = axios.post('/api/contacts-app/toggle-starred-contact', {\n\t\t\tcontactId\n\t\t});\n\n\t\treturn request.then(response =>\n\t\t\tPromise.all([\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: TOGGLE_STARRED_CONTACT\n\t\t\t\t}),\n\t\t\t\tdispatch(getUserData())\n\t\t\t]).then(() => dispatch(getContacts(routeParams)))\n\t\t);\n\t};\n}\n\nexport function toggleStarredContacts(contactIds) {\n\treturn (dispatch, getState) => {\n\t\tconst { routeParams } = getState().contactsApp.contacts;\n\n\t\tconst request = axios.post('/api/contacts-app/toggle-starred-contacts', {\n\t\t\tcontactIds\n\t\t});\n\n\t\treturn request.then(response =>\n\t\t\tPromise.all([\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: TOGGLE_STARRED_CONTACTS\n\t\t\t\t}),\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: DESELECT_ALL_CONTACTS\n\t\t\t\t}),\n\t\t\t\tdispatch(getUserData())\n\t\t\t]).then(() => dispatch(getContacts(routeParams)))\n\t\t);\n\t};\n}\n\nexport function setContactsStarred(contactIds) {\n\treturn (dispatch, getState) => {\n\t\tconst { routeParams } = getState().contactsApp.contacts;\n\n\t\tconst request = axios.post('/api/contacts-app/set-contacts-starred', {\n\t\t\tcontactIds\n\t\t});\n\n\t\treturn request.then(response =>\n\t\t\tPromise.all([\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: SET_CONTACTS_STARRED\n\t\t\t\t}),\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: DESELECT_ALL_CONTACTS\n\t\t\t\t}),\n\t\t\t\tdispatch(getUserData())\n\t\t\t]).then(() => dispatch(getContacts(routeParams)))\n\t\t);\n\t};\n}\n\nexport function setContactsUnstarred(contactIds) {\n\treturn (dispatch, getState) => {\n\t\tconst { routeParams } = getState().contactsApp.contacts;\n\n\t\tconst request = axios.post('/api/contacts-app/set-contacts-unstarred', {\n\t\t\tcontactIds\n\t\t});\n\n\t\treturn request.then(response =>\n\t\t\tPromise.all([\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: SET_CONTACTS_STARRED\n\t\t\t\t}),\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: DESELECT_ALL_CONTACTS\n\t\t\t\t}),\n\t\t\t\tdispatch(getUserData())\n\t\t\t]).then(() => dispatch(getContacts(routeParams)))\n\t\t);\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}