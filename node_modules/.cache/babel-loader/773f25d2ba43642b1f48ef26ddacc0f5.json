{"ast":null,"code":"import { getUserData } from 'app/contacts/store/actions/user.actions';\nimport axios from 'axios';\nimport firebaseService from 'app/services/firebaseService';\nimport _ from '@lodash';\nexport var GET_CONTACTS = '[CONTACTS APP] GET CONTACTS';\nexport var SET_SEARCH_TEXT = '[CONTACTS APP] SET SEARCH TEXT';\nexport var TOGGLE_IN_SELECTED_CONTACTS = '[CONTACTS APP] TOGGLE IN SELECTED CONTACTS';\nexport var SELECT_ALL_CONTACTS = '[CONTACTS APP] SELECT ALL CONTACTS';\nexport var DESELECT_ALL_CONTACTS = '[CONTACTS APP] DESELECT ALL CONTACTS';\nexport var OPEN_NEW_CONTACT_DIALOG = '[CONTACTS APP] OPEN NEW CONTACT DIALOG';\nexport var CLOSE_NEW_CONTACT_DIALOG = '[CONTACTS APP] CLOSE NEW CONTACT DIALOG';\nexport var OPEN_EDIT_CONTACT_DIALOG = '[CONTACTS APP] OPEN EDIT CONTACT DIALOG';\nexport var CLOSE_EDIT_CONTACT_DIALOG = '[CONTACTS APP] CLOSE EDIT CONTACT DIALOG';\nexport var ADD_CONTACT = '[CONTACTS APP] ADD CONTACT';\nexport var UPDATE_CONTACT = '[CONTACTS APP] UPDATE CONTACT';\nexport var REMOVE_CONTACT = '[CONTACTS APP] REMOVE CONTACT';\nexport var REMOVE_CONTACTS = '[CONTACTS APP] REMOVE CONTACTS';\nexport var TOGGLE_STARRED_CONTACT = '[CONTACTS APP] TOGGLE STARRED CONTACT';\nexport var TOGGLE_STARRED_CONTACTS = '[CONTACTS APP] TOGGLE STARRED CONTACTS';\nexport var SET_CONTACTS_STARRED = '[CONTACTS APP] SET CONTACTS STARRED ';\nexport function getContacts(routeParams) {\n  return function (dispatch, getState) {\n    var ref = firebaseService.db.ref(\"contacts\");\n\n    switch (routeParams.id) {\n      case 'starred':\n        ref = ref.orderByChild(\"starred\").equalTo(true);\n        break;\n\n      default:\n    }\n\n    ref.once('value').then(function (snapshot) {\n      var contacts = snapshot.val();\n\n      _.forEach(contacts, function (value, key) {\n        if (value) value.id = key;\n      });\n\n      return dispatch({\n        type: GET_CONTACTS,\n        payload: contacts,\n        routeParams: routeParams\n      });\n    });\n  };\n}\nexport function setSearchText(event) {\n  return {\n    type: SET_SEARCH_TEXT,\n    searchText: event.target.value\n  };\n}\nexport function toggleInSelectedContacts(contactId) {\n  return {\n    type: TOGGLE_IN_SELECTED_CONTACTS,\n    contactId: contactId\n  };\n}\nexport function selectAllContacts() {\n  return {\n    type: SELECT_ALL_CONTACTS\n  };\n}\nexport function deSelectAllContacts() {\n  return {\n    type: DESELECT_ALL_CONTACTS\n  };\n}\nexport function openNewContactDialog() {\n  return {\n    type: OPEN_NEW_CONTACT_DIALOG\n  };\n}\nexport function closeNewContactDialog() {\n  return {\n    type: CLOSE_NEW_CONTACT_DIALOG\n  };\n}\nexport function openEditContactDialog(data) {\n  return {\n    type: OPEN_EDIT_CONTACT_DIALOG,\n    data: data\n  };\n}\nexport function closeEditContactDialog() {\n  return {\n    type: CLOSE_EDIT_CONTACT_DIALOG\n  };\n}\nexport function addContact(newContact) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    firebaseService.db.ref(\"contacts\").push(newContact).then(function (snapshot) {\n      Promise.all([dispatch({\n        type: ADD_CONTACT\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function updateContact(contact) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    firebaseService.db.ref('contacts').child(contact.id).update(contact).then(function () {\n      Promise.all([dispatch({\n        type: ADD_CONTACT\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    }).catch(function (error) {\n      return {\n        errorCode: error.code,\n        errorMessage: error.message\n      };\n    });\n  };\n}\nexport function removeContact(contactId) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var id = contactId;\n    firebaseService.db.ref(\"contacts/\".concat(id)).remove().then(function () {\n      Promise.all([dispatch({\n        type: REMOVE_CONTACT\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    }).catch(function (error) {\n      return {\n        errorCode: error.code,\n        errorMessage: error.message\n      };\n    });\n  };\n}\nexport function removeContacts(contactIds) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var promises = [];\n    contactIds.forEach(function (element) {\n      promises.push(firebaseService.db.ref(\"contacts/\".concat(element)).remove());\n    });\n    return Promise.all(promises).then(function (result) {\n      Promise.all([dispatch({\n        type: REMOVE_CONTACTS\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function toggleStarredContact(contactId) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    firebaseService.db.ref('contacts').child(contactId).once(\"value\", function (snapshot) {\n      var contact = snapshot.val();\n\n      if (contact.starred === undefined || contact.starred === false) {\n        contact.starred = true;\n      } else {\n        contact.starred = false;\n      }\n\n      firebaseService.db.ref('contacts').child(contactId).update(contact).then(function () {\n        Promise.all([dispatch({\n          type: TOGGLE_STARRED_CONTACT\n        })]).then(function () {\n          return dispatch(getContacts(routeParams));\n        });\n      });\n    });\n  };\n}\nexport function toggleStarredContacts(contactIds) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var promises = [];\n    contactIds.forEach(function (element) {\n      promises.push(firebaseService.db.ref('contacts').child(element).update({\n        starred: true\n      }));\n    });\n    return Promise.all(promises).then(function (result) {\n      Promise.all([dispatch({\n        type: TOGGLE_STARRED_CONTACTS\n      }), dispatch({\n        type: DESELECT_ALL_CONTACTS\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    }); // const request = axios.post('/api/contacts-app/toggle-starred-contacts', {\n    //     contactIds\n    // });\n    // return request.then(response =>\n    //     Promise.all([\n    //         dispatch({\n    //             type: TOGGLE_STARRED_CONTACTS\n    //         }),\n    //         dispatch({\n    //             type: DESELECT_ALL_CONTACTS\n    //         }),\n    //         dispatch(getUserData())\n    //     ]).then(() => dispatch(getContacts(routeParams)))\n    // );\n  };\n}\nexport function setContactsStarred(contactIds) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var promises = [];\n    contactIds.forEach(function (element) {\n      promises.push(firebaseService.db.ref('contacts').child(element).update({\n        starred: true\n      }));\n    });\n    return Promise.all(promises).then(function (result) {\n      Promise.all([dispatch({\n        type: TOGGLE_STARRED_CONTACTS\n      }), dispatch({\n        type: DESELECT_ALL_CONTACTS\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function setContactsUnstarred(contactIds) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var promises = [];\n    contactIds.forEach(function (element) {\n      promises.push(firebaseService.db.ref('contacts').child(element).update({\n        starred: false\n      }));\n    });\n    return Promise.all(promises).then(function (result) {\n      Promise.all([dispatch({\n        type: TOGGLE_STARRED_CONTACTS\n      }), dispatch({\n        type: DESELECT_ALL_CONTACTS\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/msumaran/Documents/Proyectos/masternativos/src/app/contacts/store/actions/contacts.actions.js"],"names":["getUserData","axios","firebaseService","_","GET_CONTACTS","SET_SEARCH_TEXT","TOGGLE_IN_SELECTED_CONTACTS","SELECT_ALL_CONTACTS","DESELECT_ALL_CONTACTS","OPEN_NEW_CONTACT_DIALOG","CLOSE_NEW_CONTACT_DIALOG","OPEN_EDIT_CONTACT_DIALOG","CLOSE_EDIT_CONTACT_DIALOG","ADD_CONTACT","UPDATE_CONTACT","REMOVE_CONTACT","REMOVE_CONTACTS","TOGGLE_STARRED_CONTACT","TOGGLE_STARRED_CONTACTS","SET_CONTACTS_STARRED","getContacts","routeParams","dispatch","getState","ref","db","id","orderByChild","equalTo","once","then","snapshot","contacts","val","forEach","value","key","type","payload","setSearchText","event","searchText","target","toggleInSelectedContacts","contactId","selectAllContacts","deSelectAllContacts","openNewContactDialog","closeNewContactDialog","openEditContactDialog","data","closeEditContactDialog","addContact","newContact","contactsApp","push","Promise","all","updateContact","contact","child","update","catch","error","errorCode","code","errorMessage","message","removeContact","remove","removeContacts","contactIds","promises","element","result","toggleStarredContact","starred","undefined","toggleStarredContacts","setContactsStarred","setContactsUnstarred"],"mappings":"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","sourcesContent":["import { getUserData } from 'app/contacts/store/actions/user.actions';\nimport axios from 'axios';\nimport firebaseService from 'app/services/firebaseService';\nimport _ from '@lodash';\nexport const GET_CONTACTS = '[CONTACTS APP] GET CONTACTS';\nexport const SET_SEARCH_TEXT = '[CONTACTS APP] SET SEARCH TEXT';\nexport const TOGGLE_IN_SELECTED_CONTACTS = '[CONTACTS APP] TOGGLE IN SELECTED CONTACTS';\nexport const SELECT_ALL_CONTACTS = '[CONTACTS APP] SELECT ALL CONTACTS';\nexport const DESELECT_ALL_CONTACTS = '[CONTACTS APP] DESELECT ALL CONTACTS';\nexport const OPEN_NEW_CONTACT_DIALOG = '[CONTACTS APP] OPEN NEW CONTACT DIALOG';\nexport const CLOSE_NEW_CONTACT_DIALOG = '[CONTACTS APP] CLOSE NEW CONTACT DIALOG';\nexport const OPEN_EDIT_CONTACT_DIALOG = '[CONTACTS APP] OPEN EDIT CONTACT DIALOG';\nexport const CLOSE_EDIT_CONTACT_DIALOG = '[CONTACTS APP] CLOSE EDIT CONTACT DIALOG';\nexport const ADD_CONTACT = '[CONTACTS APP] ADD CONTACT';\nexport const UPDATE_CONTACT = '[CONTACTS APP] UPDATE CONTACT';\nexport const REMOVE_CONTACT = '[CONTACTS APP] REMOVE CONTACT';\nexport const REMOVE_CONTACTS = '[CONTACTS APP] REMOVE CONTACTS';\nexport const TOGGLE_STARRED_CONTACT = '[CONTACTS APP] TOGGLE STARRED CONTACT';\nexport const TOGGLE_STARRED_CONTACTS = '[CONTACTS APP] TOGGLE STARRED CONTACTS';\nexport const SET_CONTACTS_STARRED = '[CONTACTS APP] SET CONTACTS STARRED ';\n\nexport function getContacts(routeParams) {\n    return (dispatch, getState) => {\n        let ref =  firebaseService.db.ref(`contacts`);\n\n        switch(routeParams.id){\n            case 'starred':\n                ref = ref.orderByChild(\"starred\").equalTo(true)\n            break;\n            default:\n\n        }\n            ref\n            .once('value')\n            .then(snapshot => {\n                const contacts = snapshot.val(); \n                _.forEach(contacts, function(value, key) {\n                    if (value) value.id = key;\n                });\n\n                return dispatch({\n                    type: GET_CONTACTS,\n                    payload: contacts,\n                    routeParams\n                })\n\n            });\n    }\n}\n\nexport function setSearchText(event) {\n    return {\n        type: SET_SEARCH_TEXT,\n        searchText: event.target.value\n    };\n}\n\nexport function toggleInSelectedContacts(contactId) {\n    return {\n        type: TOGGLE_IN_SELECTED_CONTACTS,\n        contactId\n    };\n}\n\nexport function selectAllContacts() {\n    return {\n        type: SELECT_ALL_CONTACTS\n    };\n}\n\nexport function deSelectAllContacts() {\n    return {\n        type: DESELECT_ALL_CONTACTS\n    };\n}\n\nexport function openNewContactDialog() {\n    return {\n        type: OPEN_NEW_CONTACT_DIALOG\n    };\n}\n\nexport function closeNewContactDialog() {\n    return {\n        type: CLOSE_NEW_CONTACT_DIALOG\n    };\n}\n\nexport function openEditContactDialog(data) {\n    return {\n        type: OPEN_EDIT_CONTACT_DIALOG,\n        data\n    };\n}\n\nexport function closeEditContactDialog() {\n    return {\n        type: CLOSE_EDIT_CONTACT_DIALOG\n    };\n}\n\nexport function addContact(newContact) {\n    return (dispatch, getState) => {\n        const { routeParams } = getState().contactsApp.contacts;\n        firebaseService.db.ref(`contacts`)\n            .push(newContact)\n            .then(snapshot => {\n                Promise.all([\n                    dispatch({\n                        type: ADD_CONTACT\n                    })\n                ]).then(() => dispatch(getContacts(routeParams)));\n            });\n    };\n}\n\nexport function updateContact(contact) {\n    return (dispatch, getState) => {\n        const { routeParams } = getState().contactsApp.contacts;\n        firebaseService.db.ref('contacts').child(contact.id).update(contact).then(() => {\n            Promise.all([\n                dispatch({\n                    type: ADD_CONTACT\n                })\n            ]).then(() => dispatch(getContacts(routeParams)));\n        }).catch(error => {\n            return {\n                errorCode: error.code,\n                errorMessage: error.message\n            }\n        });\n    };\n}\n\nexport function removeContact(contactId) {\n    return (dispatch, getState) => {\n        const { routeParams } = getState().contactsApp.contacts;\n        const id = contactId;\n        firebaseService.db.ref(`contacts/${id}`).remove().then(() => {\n            Promise.all([\n                dispatch({\n                    type: REMOVE_CONTACT\n                })\n            ]).then(() => dispatch(getContacts(routeParams)));\n        }).catch(error => {\n            return {\n                errorCode: error.code,\n                errorMessage: error.message\n            }\n        });\n    };\n}\n\nexport function removeContacts(contactIds) {\n    return (dispatch, getState) => {\n        const { routeParams } = getState().contactsApp.contacts;\n\n        let promises = [];\n        contactIds.forEach(element => {\n            promises.push(firebaseService.db.ref(`contacts/${element}`).remove());\n        });\n\n        return Promise.all(promises).then(result => {\n            Promise.all([\n                dispatch({\n                    type: REMOVE_CONTACTS\n                })\n            ]).then(() => dispatch(getContacts(routeParams)));\n        });\n    };\n}\n\nexport function toggleStarredContact(contactId) {\n    return (dispatch, getState) => {\n        const { routeParams } = getState().contactsApp.contacts;\n\n      \n        firebaseService.db.ref('contacts').child(contactId).once(\"value\", function(snapshot) {\n            let contact = snapshot.val();\n            if (contact.starred === undefined || contact.starred === false) {\n                contact.starred = true;\n            } else {\n                contact.starred = false;\n            }\n            firebaseService.db.ref('contacts').child(contactId).update(contact).then(() => {\n                Promise.all([\n                    dispatch({\n                        type: TOGGLE_STARRED_CONTACT\n                    })\n                ]).then(() => dispatch(getContacts(routeParams)))\n            });\n        });\n    };\n}\n\nexport function toggleStarredContacts(contactIds) {\n    return (dispatch, getState) => {\n        const { routeParams } = getState().contactsApp.contacts;\n\n        let promises = [];\n        contactIds.forEach(element => {\n            promises.push(firebaseService.db.ref('contacts').child(element).update({starred: true}));\n        });\n\n        return Promise.all(promises).then(result => {\n            Promise.all([\n                dispatch({\n                    type: TOGGLE_STARRED_CONTACTS\n                }),\n                dispatch({\n                    type: DESELECT_ALL_CONTACTS\n                }),\n            ]).then(() => dispatch(getContacts(routeParams)));\n        });\n\n        // const request = axios.post('/api/contacts-app/toggle-starred-contacts', {\n        //     contactIds\n        // });\n\n        // return request.then(response =>\n        //     Promise.all([\n        //         dispatch({\n        //             type: TOGGLE_STARRED_CONTACTS\n        //         }),\n        //         dispatch({\n        //             type: DESELECT_ALL_CONTACTS\n        //         }),\n        //         dispatch(getUserData())\n        //     ]).then(() => dispatch(getContacts(routeParams)))\n        // );\n    };\n}\n\nexport function setContactsStarred(contactIds) {\n    return (dispatch, getState) => {\n        const { routeParams } = getState().contactsApp.contacts;\n\n        let promises = [];\n        contactIds.forEach(element => {\n            promises.push(firebaseService.db.ref('contacts').child(element).update({starred: true}));\n        });\n\n        return Promise.all(promises).then(result => {\n            Promise.all([\n                dispatch({\n                    type: TOGGLE_STARRED_CONTACTS\n                }),\n                dispatch({\n                    type: DESELECT_ALL_CONTACTS\n                }),\n            ]).then(() => dispatch(getContacts(routeParams)));\n        });\n    };\n}\n\nexport function setContactsUnstarred(contactIds) {\n    return (dispatch, getState) => {\n        const { routeParams } = getState().contactsApp.contacts;\n\n        let promises = [];\n        contactIds.forEach(element => {\n            promises.push(firebaseService.db.ref('contacts').child(element).update({starred: false}));\n        });\n\n        return Promise.all(promises).then(result => {\n            Promise.all([\n                dispatch({\n                    type: TOGGLE_STARRED_CONTACTS\n                }),\n                dispatch({\n                    type: DESELECT_ALL_CONTACTS\n                }),\n            ]).then(() => dispatch(getContacts(routeParams)));\n        });\n    };\n}"]},"metadata":{},"sourceType":"module"}