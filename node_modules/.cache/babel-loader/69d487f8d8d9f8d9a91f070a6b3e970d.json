{"ast":null,"code":"import FuseUtils from '@fuse/utils';\nimport history from '@history';\nimport firebaseService from 'app/services/firebaseService';\nimport _ from '@lodash';\nimport { showMessage } from 'app/store/actions/fuse';\nimport axios from 'axios';\nimport CardModel from '../../model/CardModel';\nimport ListModel from '../../model/ListModel';\nimport * as BoardsActions from './boards.actions';\nimport reorder, { reorderQuoteMap } from './reorder';\nexport var GET_BOARD = '[SCRUMBOARD APP] GET BOARD';\nexport var DELETE_BOARD = '[SCRUMBOARD APP] DELETE BOARD';\nexport var COPY_BOARD = '[SCRUMBOARD APP] COPY BOARD';\nexport var RENAME_BOARD = '[SCRUMBOARD APP] RENAME BOARD';\nexport var CHANGE_BOARD_SETTINGS = '[SCRUMBOARD APP] CHANGE BOARD SETTINGS';\nexport var RESET_BOARD = '[SCRUMBOARD APP] RESET BOARD';\nexport var ORDER_LIST = '[SCRUMBOARD APP] ORDER LIST';\nexport var ORDER_CARD = '[SCRUMBOARD APP] ORDER CARD';\nexport var ADD_CARD = '[SCRUMBOARD APP] ADD CARD';\nexport var ADD_LIST = '[SCRUMBOARD APP] ADD LIST';\nexport var ADD_LABEL = '[SCRUMBOARD APP] ADD LABEL';\nexport var RENAME_LIST = '[SCRUMBOARD APP] RENAME LIST';\nexport var REMOVE_LIST = '[SCRUMBOARD APP] REMOVE LIST';\nexport function getBoard(params) {\n  console.log(params);\n  var ref = firebaseService.db.ref('board/${params.boardId}').get();\n  ref.once('value').then(function (snapshot) {\n    var contacts = snapshot.val();\n    console.log(contacts);\n  }); // const request = axios.get('/api/scrumboard-app/board', { params });\n  // return dispatch =>\n  // \trequest.then(\n  // \t\tresponse =>\n  // \t\t\tdispatch({\n  // \t\t\t\ttype: GET_BOARD,\n  // \t\t\t\tpayload: response.data\n  // \t\t\t}),\n  // \t\terror => {\n  // \t\t\tdispatch(\n  // \t\t\t\tshowMessage({\n  // \t\t\t\t\tmessage: error.response.data,\n  // \t\t\t\t\tautoHideDuration: 2000,\n  // \t\t\t\t\tanchorOrigin: {\n  // \t\t\t\t\t\tvertical: 'top',\n  // \t\t\t\t\t\thorizontal: 'right'\n  // \t\t\t\t\t}\n  // \t\t\t\t})\n  // \t\t\t);\n  // \t\t\thistory.push({\n  // \t\t\t\tpathname: '/apps/scrumboard/boards'\n  // \t\t\t});\n  // \t\t}\n  // \t);\n}\nexport function resetBoard() {\n  return {\n    type: RESET_BOARD\n  };\n}\nexport function reorderList(result) {\n  return function (dispatch, getState) {\n    var board = getState().scrumboardApp.board;\n    var lists = board.lists;\n    var ordered = reorder(lists, result.source.index, result.destination.index);\n    var request = axios.post('/api/scrumboard-app/list/order', {\n      boardId: board.id,\n      lists: ordered\n    });\n    request.then(function (response) {\n      dispatch(showMessage({\n        message: 'List Order Saved',\n        autoHideDuration: 2000,\n        anchorOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        }\n      }));\n    });\n    return dispatch({\n      type: ORDER_LIST,\n      payload: ordered\n    });\n  };\n}\nexport function reorderCard(result) {\n  return function (dispatch, getState) {\n    var board = getState().scrumboardApp.board;\n    var lists = board.lists;\n    var ordered = reorderQuoteMap(lists, result.source, result.destination);\n    var request = axios.post('/api/scrumboard-app/card/order', {\n      boardId: board.id,\n      lists: ordered\n    });\n    request.then(function (response) {\n      dispatch(showMessage({\n        message: 'Card Order Saved',\n        autoHideDuration: 2000,\n        anchorOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        }\n      }));\n    });\n    return dispatch({\n      type: ORDER_CARD,\n      payload: ordered\n    });\n  };\n}\nexport function newCard(boardId, listId, cardTitle) {\n  var data = new CardModel({\n    name: cardTitle\n  });\n  var request = axios.post('/api/scrumboard-app/card/new', {\n    boardId: boardId,\n    listId: listId,\n    data: data\n  });\n  return function (dispatch) {\n    return new Promise(function (resolve, reject) {\n      request.then(function (response) {\n        resolve(response.data);\n        return dispatch({\n          type: ADD_CARD,\n          payload: response.data\n        });\n      });\n    });\n  };\n}\nexport function newList(boardId, listTitle) {\n  var data = new ListModel({\n    name: listTitle\n  });\n  var request = axios.post('/api/scrumboard-app/list/new', {\n    boardId: boardId,\n    data: data\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      return dispatch({\n        type: ADD_LIST,\n        payload: response.data\n      });\n    });\n  };\n}\nexport function renameList(boardId, listId, listTitle) {\n  var request = axios.post('/api/scrumboard-app/list/rename', {\n    boardId: boardId,\n    listId: listId,\n    listTitle: listTitle\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      return dispatch({\n        type: RENAME_LIST,\n        listId: listId,\n        listTitle: listTitle\n      });\n    });\n  };\n}\nexport function removeList(boardId, listId) {\n  var request = axios.post('/api/scrumboard-app/list/remove', {\n    boardId: boardId,\n    listId: listId\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      return dispatch({\n        type: REMOVE_LIST,\n        listId: listId\n      });\n    });\n  };\n}\nexport function addLabel(label) {\n  return function (dispatch) {\n    return dispatch({\n      type: ADD_LABEL,\n      payload: label\n    });\n  };\n}\nexport function changeBoardSettings(newSettings) {\n  return function (dispatch, getState) {\n    var board = getState().scrumboardApp.board;\n\n    var settings = _.merge(board.settings, newSettings);\n\n    var request = axios.post('/api/scrumboard-app/board/settings/update', {\n      boardId: board.id,\n      settings: settings\n    });\n    return request.then(function (response) {\n      return dispatch({\n        type: CHANGE_BOARD_SETTINGS,\n        payload: response.data\n      });\n    });\n  };\n}\nexport function deleteBoard(boardId) {\n  var request = axios.post('/api/scrumboard-app/board/delete', {\n    boardId: boardId\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      history.push({\n        pathname: '/apps/scrumboard/boards'\n      });\n      return dispatch({\n        type: DELETE_BOARD\n      });\n    });\n  };\n}\nexport function copyBoard(board) {\n  var newBoard = _.merge(board, {\n    id: FuseUtils.generateGUID(),\n    name: \"\".concat(board.name, \" (Copied)\"),\n    uri: \"\".concat(board.uri, \"-copied\")\n  });\n\n  return function (dispatch) {\n    dispatch(BoardsActions.newBoard(newBoard));\n    return {\n      type: COPY_BOARD\n    };\n  };\n}\nexport function renameBoard(boardId, boardTitle) {\n  var request = axios.post('/api/scrumboard-app/board/rename', {\n    boardId: boardId,\n    boardTitle: boardTitle\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      return dispatch({\n        type: RENAME_BOARD,\n        boardTitle: boardTitle\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/msumaran/Documents/Proyectos/masternativos/src/app/scrumboard/store/actions/board.actions.js"],"names":["FuseUtils","history","firebaseService","_","showMessage","axios","CardModel","ListModel","BoardsActions","reorder","reorderQuoteMap","GET_BOARD","DELETE_BOARD","COPY_BOARD","RENAME_BOARD","CHANGE_BOARD_SETTINGS","RESET_BOARD","ORDER_LIST","ORDER_CARD","ADD_CARD","ADD_LIST","ADD_LABEL","RENAME_LIST","REMOVE_LIST","getBoard","params","console","log","ref","db","get","once","then","snapshot","contacts","val","resetBoard","type","reorderList","result","dispatch","getState","board","scrumboardApp","lists","ordered","source","index","destination","request","post","boardId","id","response","message","autoHideDuration","anchorOrigin","vertical","horizontal","payload","reorderCard","newCard","listId","cardTitle","data","name","Promise","resolve","reject","newList","listTitle","renameList","removeList","addLabel","label","changeBoardSettings","newSettings","settings","merge","deleteBoard","push","pathname","copyBoard","newBoard","generateGUID","uri","renameBoard","boardTitle"],"mappings":"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","sourcesContent":["import FuseUtils from '@fuse/utils';\nimport history from '@history';\nimport firebaseService from 'app/services/firebaseService';\nimport _ from '@lodash';\nimport { showMessage } from 'app/store/actions/fuse';\nimport axios from 'axios';\nimport CardModel from '../../model/CardModel';\nimport ListModel from '../../model/ListModel';\nimport * as BoardsActions from './boards.actions';\nimport reorder, { reorderQuoteMap } from './reorder';\n\n\nexport const GET_BOARD = '[SCRUMBOARD APP] GET BOARD';\nexport const DELETE_BOARD = '[SCRUMBOARD APP] DELETE BOARD';\nexport const COPY_BOARD = '[SCRUMBOARD APP] COPY BOARD';\nexport const RENAME_BOARD = '[SCRUMBOARD APP] RENAME BOARD';\nexport const CHANGE_BOARD_SETTINGS = '[SCRUMBOARD APP] CHANGE BOARD SETTINGS';\nexport const RESET_BOARD = '[SCRUMBOARD APP] RESET BOARD';\nexport const ORDER_LIST = '[SCRUMBOARD APP] ORDER LIST';\nexport const ORDER_CARD = '[SCRUMBOARD APP] ORDER CARD';\nexport const ADD_CARD = '[SCRUMBOARD APP] ADD CARD';\nexport const ADD_LIST = '[SCRUMBOARD APP] ADD LIST';\nexport const ADD_LABEL = '[SCRUMBOARD APP] ADD LABEL';\nexport const RENAME_LIST = '[SCRUMBOARD APP] RENAME LIST';\nexport const REMOVE_LIST = '[SCRUMBOARD APP] REMOVE LIST';\n\nexport function getBoard(params) {\n\n\tconsole.log(params);\n\tlet ref = firebaseService.db.ref('board/${params.boardId}').get();\n\n\n\tref\n            .once('value')\n            .then(snapshot => {\n                let contacts = snapshot.val();\n                console.log(contacts);\n\n            });\n\n\t// const request = axios.get('/api/scrumboard-app/board', { params });\n\n\t// return dispatch =>\n\t// \trequest.then(\n\t// \t\tresponse =>\n\t// \t\t\tdispatch({\n\t// \t\t\t\ttype: GET_BOARD,\n\t// \t\t\t\tpayload: response.data\n\t// \t\t\t}),\n\t// \t\terror => {\n\t// \t\t\tdispatch(\n\t// \t\t\t\tshowMessage({\n\t// \t\t\t\t\tmessage: error.response.data,\n\t// \t\t\t\t\tautoHideDuration: 2000,\n\t// \t\t\t\t\tanchorOrigin: {\n\t// \t\t\t\t\t\tvertical: 'top',\n\t// \t\t\t\t\t\thorizontal: 'right'\n\t// \t\t\t\t\t}\n\t// \t\t\t\t})\n\t// \t\t\t);\n\t// \t\t\thistory.push({\n\t// \t\t\t\tpathname: '/apps/scrumboard/boards'\n\t// \t\t\t});\n\t// \t\t}\n\t// \t);\n}\n\nexport function resetBoard() {\n\treturn {\n\t\ttype: RESET_BOARD\n\t};\n}\n\nexport function reorderList(result) {\n\treturn (dispatch, getState) => {\n\t\tconst { board } = getState().scrumboardApp;\n\t\tconst { lists } = board;\n\n\t\tconst ordered = reorder(lists, result.source.index, result.destination.index);\n\n\t\tconst request = axios.post('/api/scrumboard-app/list/order', {\n\t\t\tboardId: board.id,\n\t\t\tlists: ordered\n\t\t});\n\n\t\trequest.then(response => {\n\t\t\tdispatch(\n\t\t\t\tshowMessage({\n\t\t\t\t\tmessage: 'List Order Saved',\n\t\t\t\t\tautoHideDuration: 2000,\n\t\t\t\t\tanchorOrigin: {\n\t\t\t\t\t\tvertical: 'top',\n\t\t\t\t\t\thorizontal: 'right'\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t});\n\n\t\treturn dispatch({\n\t\t\ttype: ORDER_LIST,\n\t\t\tpayload: ordered\n\t\t});\n\t};\n}\n\nexport function reorderCard(result) {\n\treturn (dispatch, getState) => {\n\t\tconst { board } = getState().scrumboardApp;\n\t\tconst { lists } = board;\n\n\t\tconst ordered = reorderQuoteMap(lists, result.source, result.destination);\n\n\t\tconst request = axios.post('/api/scrumboard-app/card/order', {\n\t\t\tboardId: board.id,\n\t\t\tlists: ordered\n\t\t});\n\n\t\trequest.then(response => {\n\t\t\tdispatch(\n\t\t\t\tshowMessage({\n\t\t\t\t\tmessage: 'Card Order Saved',\n\t\t\t\t\tautoHideDuration: 2000,\n\t\t\t\t\tanchorOrigin: {\n\t\t\t\t\t\tvertical: 'top',\n\t\t\t\t\t\thorizontal: 'right'\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t});\n\n\t\treturn dispatch({\n\t\t\ttype: ORDER_CARD,\n\t\t\tpayload: ordered\n\t\t});\n\t};\n}\n\nexport function newCard(boardId, listId, cardTitle) {\n\tconst data = new CardModel({ name: cardTitle });\n\n\tconst request = axios.post('/api/scrumboard-app/card/new', {\n\t\tboardId,\n\t\tlistId,\n\t\tdata\n\t});\n\treturn dispatch =>\n\t\tnew Promise((resolve, reject) => {\n\t\t\trequest.then(response => {\n\t\t\t\tresolve(response.data);\n\t\t\t\treturn dispatch({\n\t\t\t\t\ttype: ADD_CARD,\n\t\t\t\t\tpayload: response.data\n\t\t\t\t});\n\t\t\t});\n\t\t});\n}\n\nexport function newList(boardId, listTitle) {\n\tconst data = new ListModel({ name: listTitle });\n\n\tconst request = axios.post('/api/scrumboard-app/list/new', {\n\t\tboardId,\n\t\tdata\n\t});\n\n\treturn dispatch =>\n\t\trequest.then(response =>\n\t\t\tdispatch({\n\t\t\t\ttype: ADD_LIST,\n\t\t\t\tpayload: response.data\n\t\t\t})\n\t\t);\n}\n\nexport function renameList(boardId, listId, listTitle) {\n\tconst request = axios.post('/api/scrumboard-app/list/rename', {\n\t\tboardId,\n\t\tlistId,\n\t\tlistTitle\n\t});\n\n\treturn dispatch =>\n\t\trequest.then(response =>\n\t\t\tdispatch({\n\t\t\t\ttype: RENAME_LIST,\n\t\t\t\tlistId,\n\t\t\t\tlistTitle\n\t\t\t})\n\t\t);\n}\n\nexport function removeList(boardId, listId) {\n\tconst request = axios.post('/api/scrumboard-app/list/remove', {\n\t\tboardId,\n\t\tlistId\n\t});\n\n\treturn dispatch =>\n\t\trequest.then(response =>\n\t\t\tdispatch({\n\t\t\t\ttype: REMOVE_LIST,\n\t\t\t\tlistId\n\t\t\t})\n\t\t);\n}\n\nexport function addLabel(label) {\n\treturn dispatch => {\n\t\treturn dispatch({\n\t\t\ttype: ADD_LABEL,\n\t\t\tpayload: label\n\t\t});\n\t};\n}\n\nexport function changeBoardSettings(newSettings) {\n\treturn (dispatch, getState) => {\n\t\tconst { board } = getState().scrumboardApp;\n\t\tconst settings = _.merge(board.settings, newSettings);\n\t\tconst request = axios.post('/api/scrumboard-app/board/settings/update', {\n\t\t\tboardId: board.id,\n\t\t\tsettings\n\t\t});\n\n\t\treturn request.then(response =>\n\t\t\tdispatch({\n\t\t\t\ttype: CHANGE_BOARD_SETTINGS,\n\t\t\t\tpayload: response.data\n\t\t\t})\n\t\t);\n\t};\n}\n\nexport function deleteBoard(boardId) {\n\tconst request = axios.post('/api/scrumboard-app/board/delete', {\n\t\tboardId\n\t});\n\n\treturn dispatch =>\n\t\trequest.then(response => {\n\t\t\thistory.push({\n\t\t\t\tpathname: '/apps/scrumboard/boards'\n\t\t\t});\n\n\t\t\treturn dispatch({\n\t\t\t\ttype: DELETE_BOARD\n\t\t\t});\n\t\t});\n}\n\nexport function copyBoard(board) {\n\tconst newBoard = _.merge(board, {\n\t\tid: FuseUtils.generateGUID(),\n\t\tname: `${board.name} (Copied)`,\n\t\turi: `${board.uri}-copied`\n\t});\n\treturn dispatch => {\n\t\tdispatch(BoardsActions.newBoard(newBoard));\n\t\treturn { type: COPY_BOARD };\n\t};\n}\n\nexport function renameBoard(boardId, boardTitle) {\n\tconst request = axios.post('/api/scrumboard-app/board/rename', {\n\t\tboardId,\n\t\tboardTitle\n\t});\n\n\treturn dispatch =>\n\t\trequest.then(response =>\n\t\t\tdispatch({\n\t\t\t\ttype: RENAME_BOARD,\n\t\t\t\tboardTitle\n\t\t\t})\n\t\t);\n}\n"]},"metadata":{},"sourceType":"module"}