{"ast":null,"code":"import _classCallCheck from \"/Users/msumaran/Documents/Proyectos/masternativos/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/msumaran/Documents/Proyectos/masternativos/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/msumaran/Documents/Proyectos/masternativos/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/msumaran/Documents/Proyectos/masternativos/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/msumaran/Documents/Proyectos/masternativos/src/app/auth/Auth.js\";\nimport FuseSplashScreen from '@fuse/core/FuseSplashScreen';\nimport * as userActions from 'app/auth/store/actions';\nimport auth0Service from 'app/services/auth0Service';\nimport firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport * as Actions from 'app/store/actions';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nvar Auth = /*#__PURE__*/function (_Component) {\n  _inherits(Auth, _Component);\n\n  var _super = _createSuper(Auth);\n\n  function Auth() {\n    var _this;\n\n    _classCallCheck(this, Auth);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      waitAuthCheck: true\n    };\n\n    _this.jwtCheck = function () {\n      return new Promise(function (resolve) {\n        jwtService.on('onAutoLogin', function () {\n          _this.props.showMessage({\n            message: 'Logging in with JWT'\n          });\n          /**\n           * Sign in and retrieve user data from Api\n           */\n\n\n          jwtService.signInWithToken().then(function (user) {\n            _this.props.setUserData(user);\n\n            resolve();\n\n            _this.props.showMessage({\n              message: 'Logged in with JWT'\n            });\n          }).catch(function (error) {\n            _this.props.showMessage({\n              message: error\n            });\n\n            resolve();\n          });\n        });\n        jwtService.on('onAutoLogout', function (message) {\n          if (message) {\n            _this.props.showMessage({\n              message: message\n            });\n          }\n\n          _this.props.logout();\n\n          resolve();\n        });\n        jwtService.on('onNoAccessToken', function () {\n          resolve();\n        });\n        jwtService.init();\n        return Promise.resolve();\n      });\n    };\n\n    _this.auth0Check = function () {\n      return new Promise(function (resolve) {\n        auth0Service.init(function (success) {\n          if (!success) {\n            resolve();\n          }\n        });\n\n        if (auth0Service.isAuthenticated()) {\n          _this.props.showMessage({\n            message: 'Logging in with Auth0'\n          });\n          /**\n           * Retrieve user data from Auth0\n           */\n\n\n          auth0Service.getUserData().then(function (tokenData) {\n            _this.props.setUserDataAuth0(tokenData);\n\n            resolve();\n\n            _this.props.showMessage({\n              message: 'Logged in with Auth0'\n            });\n          });\n        } else {\n          resolve();\n        }\n\n        return Promise.resolve();\n      });\n    };\n\n    _this.firebaseCheck = function () {\n      return new Promise(function (resolve) {\n        firebaseService.init(function (success) {\n          if (!success) {\n            resolve();\n          }\n        });\n        firebaseService.onAuthStateChanged(function (authUser) {\n          if (authUser) {\n            _this.props.showMessage({\n              message: 'Logging in with Firebase'\n            });\n            /**\n             * Retrieve user data from Firebase\n             */\n\n\n            firebaseService.getUserData(authUser.uid).then(function (user) {\n              _this.props.setUserDataFirebase(user, authUser);\n\n              resolve();\n\n              _this.props.showMessage({\n                message: 'Logged in with Firebase'\n              });\n            }, function (error) {\n              resolve();\n            });\n          } else {\n            resolve();\n          }\n        });\n        return Promise.resolve();\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Auth, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      return Promise.all([// Comment the lines which you do not use\n        //this.firebaseCheck(),\n        //this.auth0Check(),\n        // this.jwtCheck()\n      ]).then(function () {\n        _this2.setState({\n          waitAuthCheck: false\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.state.waitAuthCheck ? /*#__PURE__*/React.createElement(FuseSplashScreen, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 37\n        }\n      }) : /*#__PURE__*/React.createElement(React.Fragment, null, this.props.children);\n    }\n  }]);\n\n  return Auth;\n}(Component);\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    logout: userActions.logoutUser,\n    setUserData: userActions.setUserData,\n    setUserDataAuth0: userActions.setUserDataAuth0,\n    setUserDataFirebase: userActions.setUserDataFirebase,\n    showMessage: Actions.showMessage,\n    hideMessage: Actions.hideMessage\n  }, dispatch);\n}\n\nexport default connect(null, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/msumaran/Documents/Proyectos/masternativos/src/app/auth/Auth.js"],"names":["FuseSplashScreen","userActions","auth0Service","firebaseService","jwtService","Actions","React","Component","connect","bindActionCreators","Auth","state","waitAuthCheck","jwtCheck","Promise","resolve","on","props","showMessage","message","signInWithToken","then","user","setUserData","catch","error","logout","init","auth0Check","success","isAuthenticated","getUserData","tokenData","setUserDataAuth0","firebaseCheck","onAuthStateChanged","authUser","uid","setUserDataFirebase","all","setState","children","mapDispatchToProps","dispatch","logoutUser","hideMessage"],"mappings":"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","sourcesContent":["import FuseSplashScreen from '@fuse/core/FuseSplashScreen';\nimport * as userActions from 'app/auth/store/actions';\nimport auth0Service from 'app/services/auth0Service';\nimport firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport * as Actions from 'app/store/actions';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nclass Auth extends Component {\n\tstate = {\n\t\twaitAuthCheck: true\n\t};\n\n\tcomponentDidMount() {\n\t\treturn Promise.all([\n\t\t\t// Comment the lines which you do not use\n\t\t\t//this.firebaseCheck(),\n\t\t\t//this.auth0Check(),\n\t\t\t// this.jwtCheck()\n\t\t]).then(() => {\n\t\t\tthis.setState({ waitAuthCheck: false });\n\t\t});\n\t}\n\n\tjwtCheck = () =>\n\t\tnew Promise(resolve => {\n\t\t\tjwtService.on('onAutoLogin', () => {\n\t\t\t\tthis.props.showMessage({ message: 'Logging in with JWT' });\n\n\t\t\t\t/**\n\t\t\t\t * Sign in and retrieve user data from Api\n\t\t\t\t */\n\t\t\t\tjwtService\n\t\t\t\t\t.signInWithToken()\n\t\t\t\t\t.then(user => {\n\t\t\t\t\t\tthis.props.setUserData(user);\n\n\t\t\t\t\t\tresolve();\n\n\t\t\t\t\t\tthis.props.showMessage({ message: 'Logged in with JWT' });\n\t\t\t\t\t})\n\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\tthis.props.showMessage({ message: error });\n\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t});\n\n\t\t\tjwtService.on('onAutoLogout', message => {\n\t\t\t\tif (message) {\n\t\t\t\t\tthis.props.showMessage({ message });\n\t\t\t\t}\n\n\t\t\t\tthis.props.logout();\n\n\t\t\t\tresolve();\n\t\t\t});\n\n\t\t\tjwtService.on('onNoAccessToken', () => {\n\t\t\t\tresolve();\n\t\t\t});\n\n\t\t\tjwtService.init();\n\n\t\t\treturn Promise.resolve();\n\t\t});\n\n\tauth0Check = () =>\n\t\tnew Promise(resolve => {\n\t\t\tauth0Service.init(success => {\n\t\t\t\tif (!success) {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (auth0Service.isAuthenticated()) {\n\t\t\t\tthis.props.showMessage({ message: 'Logging in with Auth0' });\n\n\t\t\t\t/**\n\t\t\t\t * Retrieve user data from Auth0\n\t\t\t\t */\n\t\t\t\tauth0Service.getUserData().then(tokenData => {\n\t\t\t\t\tthis.props.setUserDataAuth0(tokenData);\n\n\t\t\t\t\tresolve();\n\n\t\t\t\t\tthis.props.showMessage({ message: 'Logged in with Auth0' });\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tresolve();\n\t\t\t}\n\n\t\t\treturn Promise.resolve();\n\t\t});\n\n\n\n\n\tfirebaseCheck = () =>\n\t\tnew Promise(resolve => {\n\t\t\tfirebaseService.init(success => {\n\t\t\t\tif (!success) {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfirebaseService.onAuthStateChanged(authUser => {\n\t\t\t\tif (authUser) {\n\t\t\t\t\tthis.props.showMessage({ message: 'Logging in with Firebase' });\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Retrieve user data from Firebase\n\t\t\t\t\t */\n\t\t\t\t\tfirebaseService.getUserData(authUser.uid).then(\n\t\t\t\t\t\tuser => {\n\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.props.setUserDataFirebase(user, authUser);\n\n\t\t\t\t\t\t\tresolve();\n\n\t\t\t\t\t\t\tthis.props.showMessage({ message: 'Logged in with Firebase' });\n\t\t\t\t\t\t},\n\t\t\t\t\t\terror => {\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn Promise.resolve();\n\t\t});\n\n\trender() {\n\t\treturn this.state.waitAuthCheck ? <FuseSplashScreen /> : <>{this.props.children}</>;\n\t}\n}\n\nfunction mapDispatchToProps(dispatch) {\n\treturn bindActionCreators(\n\t\t{\n\t\t\tlogout: userActions.logoutUser,\n\t\t\tsetUserData: userActions.setUserData,\n\t\t\tsetUserDataAuth0: userActions.setUserDataAuth0,\n\t\t\tsetUserDataFirebase: userActions.setUserDataFirebase,\n\t\t\tshowMessage: Actions.showMessage,\n\t\t\thideMessage: Actions.hideMessage\n\t\t},\n\t\tdispatch\n\t);\n}\n\nexport default connect(null, mapDispatchToProps)(Auth);\n"]},"metadata":{},"sourceType":"module"}