{"ast":null,"code":"import history from '@history';\nimport axios from 'axios';\nimport BoardModel from '../../model/BoardModel';\nexport var GET_BOARDS = '[SCRUMBOARD APP] GET BOARDS';\nexport var RESET_BOARDS = '[SCRUMBOARD APP] RESET BOARDS';\nexport var NEW_BOARD = '[SCRUMBOARD APP] NEW BOARD';\nexport function getBoards() {\n  var request = axios.get('/api/scrumboard-app/boards');\n  return function (dispatch) {\n    return request.then(function (response) {\n      return dispatch({\n        type: GET_BOARDS,\n        payload: response.data\n      });\n    });\n  };\n}\nexport function resetBoards() {\n  return {\n    type: RESET_BOARDS\n  };\n}\nexport function newBoard(board) {\n  var request = axios.post('/api/scrumboard-app/board/new', {\n    board: board || new BoardModel()\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      var _board = response.data;\n      history.push({\n        pathname: \"/scrumboard/boards/\".concat(_board.id, \"/\").concat(_board.handle)\n      });\n      return dispatch({\n        type: NEW_BOARD,\n        board: _board\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/msumaran/Documents/Proyectos/masternativos/src/app/scrumboard/store/actions/boards.actions.js"],"names":["history","axios","BoardModel","GET_BOARDS","RESET_BOARDS","NEW_BOARD","getBoards","request","get","dispatch","then","response","type","payload","data","resetBoards","newBoard","board","post","_board","push","pathname","id","handle"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AAEA,OAAO,IAAMC,UAAU,GAAG,6BAAnB;AACP,OAAO,IAAMC,YAAY,GAAG,+BAArB;AACP,OAAO,IAAMC,SAAS,GAAG,4BAAlB;AAEP,OAAO,SAASC,SAAT,GAAqB;AAC3B,MAAMC,OAAO,GAAGN,KAAK,CAACO,GAAN,CAAU,4BAAV,CAAhB;AAEA,SAAO,UAAAC,QAAQ;AAAA,WACdF,OAAO,CAACG,IAAR,CAAa,UAAAC,QAAQ;AAAA,aACpBF,QAAQ,CAAC;AACRG,QAAAA,IAAI,EAAET,UADE;AAERU,QAAAA,OAAO,EAAEF,QAAQ,CAACG;AAFV,OAAD,CADY;AAAA,KAArB,CADc;AAAA,GAAf;AAOA;AAED,OAAO,SAASC,WAAT,GAAuB;AAC7B,SAAO;AACNH,IAAAA,IAAI,EAAER;AADA,GAAP;AAGA;AAED,OAAO,SAASY,QAAT,CAAkBC,KAAlB,EAAyB;AAC/B,MAAMV,OAAO,GAAGN,KAAK,CAACiB,IAAN,CAAW,+BAAX,EAA4C;AAC3DD,IAAAA,KAAK,EAAEA,KAAK,IAAI,IAAIf,UAAJ;AAD2C,GAA5C,CAAhB;AAIA,SAAO,UAAAO,QAAQ;AAAA,WACdF,OAAO,CAACG,IAAR,CAAa,UAAAC,QAAQ,EAAI;AACxB,UAAMQ,MAAM,GAAGR,QAAQ,CAACG,IAAxB;AACAd,MAAAA,OAAO,CAACoB,IAAR,CAAa;AACZC,QAAAA,QAAQ,+BAAwBF,MAAM,CAACG,EAA/B,cAAqCH,MAAM,CAACI,MAA5C;AADI,OAAb;AAGA,aAAOd,QAAQ,CAAC;AACfG,QAAAA,IAAI,EAAEP,SADS;AAEfY,QAAAA,KAAK,EAAEE;AAFQ,OAAD,CAAf;AAIA,KATD,CADc;AAAA,GAAf;AAWA","sourcesContent":["import history from '@history';\nimport axios from 'axios';\nimport BoardModel from '../../model/BoardModel';\n\nexport const GET_BOARDS = '[SCRUMBOARD APP] GET BOARDS';\nexport const RESET_BOARDS = '[SCRUMBOARD APP] RESET BOARDS';\nexport const NEW_BOARD = '[SCRUMBOARD APP] NEW BOARD';\n\nexport function getBoards() {\n\tconst request = axios.get('/api/scrumboard-app/boards');\n\n\treturn dispatch =>\n\t\trequest.then(response =>\n\t\t\tdispatch({\n\t\t\t\ttype: GET_BOARDS,\n\t\t\t\tpayload: response.data\n\t\t\t})\n\t\t);\n}\n\nexport function resetBoards() {\n\treturn {\n\t\ttype: RESET_BOARDS\n\t};\n}\n\nexport function newBoard(board) {\n\tconst request = axios.post('/api/scrumboard-app/board/new', {\n\t\tboard: board || new BoardModel()\n\t});\n\n\treturn dispatch =>\n\t\trequest.then(response => {\n\t\t\tconst _board = response.data;\n\t\t\thistory.push({\n\t\t\t\tpathname: `/scrumboard/boards/${_board.id}/${_board.handle}`\n\t\t\t});\n\t\t\treturn dispatch({\n\t\t\t\ttype: NEW_BOARD,\n\t\t\t\tboard: _board\n\t\t\t});\n\t\t});\n}\n"]},"metadata":{},"sourceType":"module"}