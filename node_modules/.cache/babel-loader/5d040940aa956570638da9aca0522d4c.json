{"ast":null,"code":"import _slicedToArray from \"/Users/msumaran/Documents/Proyectos/masternativos/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _ from '@lodash'; // a little function to help us with reordering the result\n\nvar reorder = function reorder(list, startIndex, endIndex) {\n  //let result = Array.from(list);\n  list = _.keyBy(list, 'id');\n\n  var result = _.toArray(list);\n\n  var _result$splice = result.splice(startIndex, 1),\n      _result$splice2 = _slicedToArray(_result$splice, 1),\n      removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  var new_list = [];\n  result.map(function (list) {\n    new_list[list.id] = list;\n    return null;\n  });\n  console.log(new_list);\n  return result;\n};\n\nexport default reorder;\nexport var reorderQuoteMap = function reorderQuoteMap(lists, source, destination) {\n  var current = _.find(lists, {\n    id: source.droppableId\n  });\n\n  var next = _.find(lists, {\n    id: destination.droppableId\n  });\n\n  var target = current.cards[source.index]; // moving to same list\n\n  if (source.droppableId === destination.droppableId) {\n    var reordered = reorder(current.cards, source.index, destination.index);\n    return lists.map(function (list) {\n      if (list.id === source.droppableId) {\n        list.cards = reordered;\n      }\n\n      return list;\n    });\n  } // moving to different list\n  // remove from original\n\n\n  current.cards.splice(source.index, 1); // insert into next\n\n  next.cards.splice(destination.index, 0, target);\n  return lists.map(function (list) {\n    if (list.id === source.droppableId) {\n      return current;\n    }\n\n    if (list.id === destination.droppableId) {\n      return next;\n    }\n\n    return list;\n  });\n};","map":{"version":3,"sources":["/Users/msumaran/Documents/Proyectos/masternativos/src/app/scrumboard/store/actions/reorder.js"],"names":["_","reorder","list","startIndex","endIndex","keyBy","result","toArray","splice","removed","new_list","map","id","console","log","reorderQuoteMap","lists","source","destination","current","find","droppableId","next","target","cards","index","reordered"],"mappings":";AAAA,OAAOA,CAAP,MAAc,SAAd,C,CAEA;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,EAAgC;AAE/C;AACAF,EAAAA,IAAI,GAAGF,CAAC,CAACK,KAAF,CAAQH,IAAR,EAAc,IAAd,CAAP;;AACA,MAAII,MAAM,GAAGN,CAAC,CAACO,OAAF,CAAUL,IAAV,CAAb;;AAJ+C,uBAU7BI,MAAM,CAACE,MAAP,CAAcL,UAAd,EAA0B,CAA1B,CAV6B;AAAA;AAAA,MAUxCM,OAVwC;;AAW/CH,EAAAA,MAAM,CAACE,MAAP,CAAcJ,QAAd,EAAwB,CAAxB,EAA2BK,OAA3B;AACA,MAAIC,QAAQ,GAAG,EAAf;AACAJ,EAAAA,MAAM,CAACK,GAAP,CAAW,UAAAT,IAAI,EAAI;AACdQ,IAAAA,QAAQ,CAACR,IAAI,CAACU,EAAN,CAAR,GAAoBV,IAApB;AAEE,WAAO,IAAP;AACH,GAJJ;AAKAW,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AAEA,SAAOJ,MAAP;AACA,CArBD;;AAuBA,eAAeL,OAAf;AAEA,OAAO,IAAMc,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,MAAR,EAAgBC,WAAhB,EAAgC;AAC9D,MAAMC,OAAO,GAAGnB,CAAC,CAACoB,IAAF,CAAOJ,KAAP,EAAc;AAAEJ,IAAAA,EAAE,EAAEK,MAAM,CAACI;AAAb,GAAd,CAAhB;;AACA,MAAMC,IAAI,GAAGtB,CAAC,CAACoB,IAAF,CAAOJ,KAAP,EAAc;AAAEJ,IAAAA,EAAE,EAAEM,WAAW,CAACG;AAAlB,GAAd,CAAb;;AACA,MAAME,MAAM,GAAGJ,OAAO,CAACK,KAAR,CAAcP,MAAM,CAACQ,KAArB,CAAf,CAH8D,CAK9D;;AACA,MAAIR,MAAM,CAACI,WAAP,KAAuBH,WAAW,CAACG,WAAvC,EAAoD;AACnD,QAAMK,SAAS,GAAGzB,OAAO,CAACkB,OAAO,CAACK,KAAT,EAAgBP,MAAM,CAACQ,KAAvB,EAA8BP,WAAW,CAACO,KAA1C,CAAzB;AACA,WAAOT,KAAK,CAACL,GAAN,CAAU,UAAAT,IAAI,EAAI;AACxB,UAAIA,IAAI,CAACU,EAAL,KAAYK,MAAM,CAACI,WAAvB,EAAoC;AACnCnB,QAAAA,IAAI,CAACsB,KAAL,GAAaE,SAAb;AACA;;AAED,aAAOxB,IAAP;AACA,KANM,CAAP;AAOA,GAf6D,CAiB9D;AAEA;;;AACAiB,EAAAA,OAAO,CAACK,KAAR,CAAchB,MAAd,CAAqBS,MAAM,CAACQ,KAA5B,EAAmC,CAAnC,EApB8D,CAqB9D;;AACAH,EAAAA,IAAI,CAACE,KAAL,CAAWhB,MAAX,CAAkBU,WAAW,CAACO,KAA9B,EAAqC,CAArC,EAAwCF,MAAxC;AAEA,SAAOP,KAAK,CAACL,GAAN,CAAU,UAAAT,IAAI,EAAI;AACxB,QAAIA,IAAI,CAACU,EAAL,KAAYK,MAAM,CAACI,WAAvB,EAAoC;AACnC,aAAOF,OAAP;AACA;;AACD,QAAIjB,IAAI,CAACU,EAAL,KAAYM,WAAW,CAACG,WAA5B,EAAyC;AACxC,aAAOC,IAAP;AACA;;AACD,WAAOpB,IAAP;AACA,GARM,CAAP;AASA,CAjCM","sourcesContent":["import _ from '@lodash';\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n\n\t//let result = Array.from(list);\n\tlist = _.keyBy(list, 'id');\n\tlet result = _.toArray(list);\n\n\t\n\n\n\t\n\tconst [removed] = result.splice(startIndex, 1);\n\tresult.splice(endIndex, 0, removed);\n\tlet new_list = [];\n\tresult.map(list => {\n     \tnew_list[list.id] = list;\n   \n        return null;\n    });\n\tconsole.log(new_list);\n\t\n\treturn result;\n};\n\nexport default reorder;\n\nexport const reorderQuoteMap = (lists, source, destination) => {\n\tconst current = _.find(lists, { id: source.droppableId });\n\tconst next = _.find(lists, { id: destination.droppableId });\n\tconst target = current.cards[source.index];\n\n\t// moving to same list\n\tif (source.droppableId === destination.droppableId) {\n\t\tconst reordered = reorder(current.cards, source.index, destination.index);\n\t\treturn lists.map(list => {\n\t\t\tif (list.id === source.droppableId) {\n\t\t\t\tlist.cards = reordered;\n\t\t\t}\n\t\t\t\n\t\t\treturn list;\n\t\t});\n\t}\n\n\t// moving to different list\n\n\t// remove from original\n\tcurrent.cards.splice(source.index, 1);\n\t// insert into next\n\tnext.cards.splice(destination.index, 0, target);\n\n\treturn lists.map(list => {\n\t\tif (list.id === source.droppableId) {\n\t\t\treturn current;\n\t\t}\n\t\tif (list.id === destination.droppableId) {\n\t\t\treturn next;\n\t\t}\n\t\treturn list;\n\t});\n};\n"]},"metadata":{},"sourceType":"module"}