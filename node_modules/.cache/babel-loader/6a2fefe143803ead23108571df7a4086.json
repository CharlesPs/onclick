{"ast":null,"code":"import history from '@history';\nimport axios from 'axios';\nimport BoardModel from '../../model/BoardModel';\nimport firebaseService from 'app/services/firebaseService';\nexport var GET_BOARDS = '[SCRUMBOARD APP] GET BOARDS';\nexport var RESET_BOARDS = '[SCRUMBOARD APP] RESET BOARDS';\nexport var NEW_BOARD = '[SCRUMBOARD APP] NEW BOARD';\nexport function getBoards() {\n  var ref = firebaseService.db.ref(\"board\");\n  return function (dispatch) {\n    return ref.once('value').then(function (snapshot) {\n      var boards = snapshot.val();\n\n      if (boards !== null) {\n        _.forEach(boards, function (value, key) {\n          if (value) value.id = key;\n        });\n      } else {\n        boards = [];\n      }\n\n      dispatch({\n        type: GET_BOARDS,\n        payload: boards\n      });\n    });\n  }; // const request = axios.get('/api/scrumboard-app/boards');\n  // return dispatch =>\n  //     request.then(response =>\n  //         dispatch({\n  //             type: GET_BOARDS,\n  //             payload: response.data\n  //         })\n  //     );\n}\nexport function resetBoards() {\n  return {\n    type: RESET_BOARDS\n  };\n}\nexport function newBoard(board) {\n  board = new BoardModel();\n  return function (dispatch) {\n    return firebaseService.db.ref(\"board\").push(board).then(function (snapshot) {\n      history.push({\n        pathname: \"/scrumboard/boards/\".concat(snapshot.key, \"/\").concat(board.handle)\n      });\n      return dispatch({\n        type: NEW_BOARD,\n        board: board\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/msumaran/Documents/Proyectos/masternativos/src/app/scrumboard/store/actions/boards.actions.js"],"names":["history","axios","BoardModel","firebaseService","GET_BOARDS","RESET_BOARDS","NEW_BOARD","getBoards","ref","db","dispatch","once","then","snapshot","boards","val","_","forEach","value","key","id","type","payload","resetBoards","newBoard","board","push","pathname","handle"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAO,IAAMC,UAAU,GAAG,6BAAnB;AACP,OAAO,IAAMC,YAAY,GAAG,+BAArB;AACP,OAAO,IAAMC,SAAS,GAAG,4BAAlB;AAEP,OAAO,SAASC,SAAT,GAAqB;AAExB,MAAIC,GAAG,GAAGL,eAAe,CAACM,EAAhB,CAAmBD,GAAnB,SAAV;AACA,SAAO,UAAAE,QAAQ;AAAA,WACXF,GAAG,CAACG,IAAJ,CAAS,OAAT,EACCC,IADD,CACM,UAAAC,QAAQ,EAAI;AACjB,UAAIC,MAAM,GAAGD,QAAQ,CAACE,GAAT,EAAb;;AACO,UAAID,MAAM,KAAK,IAAf,EAAqB;AACjBE,QAAAA,CAAC,CAACC,OAAF,CAAUH,MAAV,EAAkB,UAASI,KAAT,EAAgBC,GAAhB,EAAqB;AACnC,cAAID,KAAJ,EAAWA,KAAK,CAACE,EAAN,GAAWD,GAAX;AACd,SAFD;AAGH,OAJD,MAIO;AACHL,QAAAA,MAAM,GAAG,EAAT;AACH;;AACLJ,MAAAA,QAAQ,CAAC;AACLW,QAAAA,IAAI,EAAEjB,UADD;AAELkB,QAAAA,OAAO,EAAER;AAFJ,OAAD,CAAR;AAKH,KAfD,CADW;AAAA,GAAf,CAHwB,CAoBxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AAED,OAAO,SAASS,WAAT,GAAuB;AAC1B,SAAO;AACHF,IAAAA,IAAI,EAAEhB;AADH,GAAP;AAGH;AAED,OAAO,SAASmB,QAAT,CAAkBC,KAAlB,EAAyB;AAC5BA,EAAAA,KAAK,GAAG,IAAIvB,UAAJ,EAAR;AAEA,SAAO,UAAAQ,QAAQ;AAAA,WACXP,eAAe,CAACM,EAAhB,CAAmBD,GAAnB,UACCkB,IADD,CACMD,KADN,EAECb,IAFD,CAEM,UAAAC,QAAQ,EAAI;AAEdb,MAAAA,OAAO,CAAC0B,IAAR,CAAa;AACTC,QAAAA,QAAQ,+BAAwBd,QAAQ,CAACM,GAAjC,cAAwCM,KAAK,CAACG,MAA9C;AADC,OAAb;AAGA,aAAOlB,QAAQ,CAAC;AACZW,QAAAA,IAAI,EAAEf,SADM;AAEZmB,QAAAA,KAAK,EAAEA;AAFK,OAAD,CAAf;AAIH,KAXD,CADW;AAAA,GAAf;AAaH","sourcesContent":["import history from '@history';\nimport axios from 'axios';\nimport BoardModel from '../../model/BoardModel';\nimport firebaseService from 'app/services/firebaseService';\nexport const GET_BOARDS = '[SCRUMBOARD APP] GET BOARDS';\nexport const RESET_BOARDS = '[SCRUMBOARD APP] RESET BOARDS';\nexport const NEW_BOARD = '[SCRUMBOARD APP] NEW BOARD';\n\nexport function getBoards() {\n\n    let ref = firebaseService.db.ref(`board`);\n    return dispatch =>\n        ref.once('value')\n        .then(snapshot => {\n        \tlet boards = snapshot.val();\n                if (boards !== null) {\n                    _.forEach(boards, function(value, key) {\n                        if (value) value.id = key;\n                    });\n                } else {\n                    boards = [];\n                }\n            dispatch({\n                type: GET_BOARDS,\n                payload: boards\n            })\n\n        });\n    // const request = axios.get('/api/scrumboard-app/boards');\n\n    // return dispatch =>\n    //     request.then(response =>\n    //         dispatch({\n    //             type: GET_BOARDS,\n    //             payload: response.data\n    //         })\n    //     );\n}\n\nexport function resetBoards() {\n    return {\n        type: RESET_BOARDS\n    };\n}\n\nexport function newBoard(board) {\n    board = new BoardModel();\n\n    return dispatch =>\n        firebaseService.db.ref(`board`)\n        .push(board)\n        .then(snapshot => {\n\n            history.push({\n                pathname: `/scrumboard/boards/${snapshot.key}/${board.handle}`\n            });\n            return dispatch({\n                type: NEW_BOARD,\n                board: board\n            });\n        });\n}"]},"metadata":{},"sourceType":"module"}