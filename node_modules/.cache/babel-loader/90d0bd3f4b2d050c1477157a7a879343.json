{"ast":null,"code":"import { getUserData } from 'app/contacts/store/actions/user.actions';\nimport axios from 'axios';\nimport firebaseService from 'app/services/firebaseService';\nimport _ from '@lodash';\nexport var GET_CONTACTS = '[CONTACTS APP] GET CONTACTS';\nexport var SET_SEARCH_TEXT = '[CONTACTS APP] SET SEARCH TEXT';\nexport var TOGGLE_IN_SELECTED_CONTACTS = '[CONTACTS APP] TOGGLE IN SELECTED CONTACTS';\nexport var SELECT_ALL_CONTACTS = '[CONTACTS APP] SELECT ALL CONTACTS';\nexport var DESELECT_ALL_CONTACTS = '[CONTACTS APP] DESELECT ALL CONTACTS';\nexport var OPEN_NEW_CONTACT_DIALOG = '[CONTACTS APP] OPEN NEW CONTACT DIALOG';\nexport var CLOSE_NEW_CONTACT_DIALOG = '[CONTACTS APP] CLOSE NEW CONTACT DIALOG';\nexport var OPEN_EDIT_CONTACT_DIALOG = '[CONTACTS APP] OPEN EDIT CONTACT DIALOG';\nexport var CLOSE_EDIT_CONTACT_DIALOG = '[CONTACTS APP] CLOSE EDIT CONTACT DIALOG';\nexport var ADD_CONTACT = '[CONTACTS APP] ADD CONTACT';\nexport var UPDATE_CONTACT = '[CONTACTS APP] UPDATE CONTACT';\nexport var REMOVE_CONTACT = '[CONTACTS APP] REMOVE CONTACT';\nexport var REMOVE_CONTACTS = '[CONTACTS APP] REMOVE CONTACTS';\nexport var TOGGLE_STARRED_CONTACT = '[CONTACTS APP] TOGGLE STARRED CONTACT';\nexport var TOGGLE_STARRED_CONTACTS = '[CONTACTS APP] TOGGLE STARRED CONTACTS';\nexport var SET_CONTACTS_STARRED = '[CONTACTS APP] SET CONTACTS STARRED ';\nexport function getContacts(routeParams) {\n  return function (dispatch, getState) {\n    firebaseService.db.ref(\"contacts\").once('value').then(function (snapshot) {\n      var contacts = snapshot.val();\n\n      _.forEach(contacts, function (value, key) {\n        value.id = key;\n      });\n\n      return dispatch({\n        type: GET_CONTACTS,\n        payload: contacts,\n        routeParams: routeParams\n      });\n    });\n  };\n}\nexport function setSearchText(event) {\n  return {\n    type: SET_SEARCH_TEXT,\n    searchText: event.target.value\n  };\n}\nexport function toggleInSelectedContacts(contactId) {\n  return {\n    type: TOGGLE_IN_SELECTED_CONTACTS,\n    contactId: contactId\n  };\n}\nexport function selectAllContacts() {\n  return {\n    type: SELECT_ALL_CONTACTS\n  };\n}\nexport function deSelectAllContacts() {\n  return {\n    type: DESELECT_ALL_CONTACTS\n  };\n}\nexport function openNewContactDialog() {\n  return {\n    type: OPEN_NEW_CONTACT_DIALOG\n  };\n}\nexport function closeNewContactDialog() {\n  return {\n    type: CLOSE_NEW_CONTACT_DIALOG\n  };\n}\nexport function openEditContactDialog(data) {\n  return {\n    type: OPEN_EDIT_CONTACT_DIALOG,\n    data: data\n  };\n}\nexport function closeEditContactDialog() {\n  return {\n    type: CLOSE_EDIT_CONTACT_DIALOG\n  };\n}\nexport function addContact(newContact) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    firebaseService.db.ref(\"contacts\").push(newContact).then(function (snapshot) {\n      Promise.all([dispatch({\n        type: ADD_CONTACT\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function updateContact(contact) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    firebaseService.db.ref('contacts').child(contact.id).update(contact).then(function () {\n      Promise.all([dispatch({\n        type: ADD_CONTACT\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    }).catch(function (error) {\n      return {\n        errorCode: error.code,\n        errorMessage: error.message\n      };\n    });\n  };\n}\nexport function removeContact(contactId) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var id = contactId;\n    firebaseService.db.ref(\"contacts/\".concat(id)).remove().then(function () {\n      Promise.all([dispatch({\n        type: REMOVE_CONTACT\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    }).catch(function (error) {\n      return {\n        errorCode: error.code,\n        errorMessage: error.message\n      };\n    }); // const request = axios.post('/api/contacts-app/remove-contact', {\n    //     contactId\n    // });\n    // return request.then(response =>\n    //     Promise.all([\n    //         dispatch({\n    //             type: REMOVE_CONTACT\n    //         })\n    //     ]).then(() => dispatch(getContacts(routeParams)))\n    // );\n  };\n}\nexport function removeContacts(contactIds) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    console.log(contactIds);\n    var batch = db.batch();\n    contactIds.forEach(function (element) {\n      batch.ref(\"contacts/\".concat(element)).remove();\n    });\n    return batch.commit().then(function () {\n      Promise.all([dispatch({\n        type: REMOVE_CONTACTS\n      })]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    }); // const id = contactIds;\n    // firebaseService.db.ref(`contacts/${id}`).remove().then(() => {\n    //     Promise.all([\n    //         dispatch({\n    //             type: REMOVE_CONTACTS\n    //         })\n    //     ]).then(() => dispatch(getContacts(routeParams)));\n    // }).catch(error => {\n    //     return {\n    //         errorCode: error.code,\n    //         errorMessage: error.message\n    //     }\n    // });\n    // const request = axios.post('/api/contacts-app/remove-contacts', {\n    //     contactIds\n    // });\n    // return request.then(response =>\n    //     Promise.all([\n    //         dispatch({\n    //             type: REMOVE_CONTACTS\n    //         }),\n    //         dispatch({\n    //             type: DESELECT_ALL_CONTACTS\n    //         })\n    //     ]).then(() => dispatch(getContacts(routeParams)))\n    // );\n  };\n}\nexport function toggleStarredContact(contactId) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/toggle-starred-contact', {\n      contactId: contactId\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: TOGGLE_STARRED_CONTACT\n      }), dispatch(getUserData())]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function toggleStarredContacts(contactIds) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/toggle-starred-contacts', {\n      contactIds: contactIds\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: TOGGLE_STARRED_CONTACTS\n      }), dispatch({\n        type: DESELECT_ALL_CONTACTS\n      }), dispatch(getUserData())]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function setContactsStarred(contactIds) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/set-contacts-starred', {\n      contactIds: contactIds\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: SET_CONTACTS_STARRED\n      }), dispatch({\n        type: DESELECT_ALL_CONTACTS\n      }), dispatch(getUserData())]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}\nexport function setContactsUnstarred(contactIds) {\n  return function (dispatch, getState) {\n    var routeParams = getState().contactsApp.contacts.routeParams;\n    var request = axios.post('/api/contacts-app/set-contacts-unstarred', {\n      contactIds: contactIds\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: SET_CONTACTS_STARRED\n      }), dispatch({\n        type: DESELECT_ALL_CONTACTS\n      }), dispatch(getUserData())]).then(function () {\n        return dispatch(getContacts(routeParams));\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/msumaran/Documents/Proyectos/masternativos/src/app/contacts/store/actions/contacts.actions.js"],"names":["getUserData","axios","firebaseService","_","GET_CONTACTS","SET_SEARCH_TEXT","TOGGLE_IN_SELECTED_CONTACTS","SELECT_ALL_CONTACTS","DESELECT_ALL_CONTACTS","OPEN_NEW_CONTACT_DIALOG","CLOSE_NEW_CONTACT_DIALOG","OPEN_EDIT_CONTACT_DIALOG","CLOSE_EDIT_CONTACT_DIALOG","ADD_CONTACT","UPDATE_CONTACT","REMOVE_CONTACT","REMOVE_CONTACTS","TOGGLE_STARRED_CONTACT","TOGGLE_STARRED_CONTACTS","SET_CONTACTS_STARRED","getContacts","routeParams","dispatch","getState","db","ref","once","then","snapshot","contacts","val","forEach","value","key","id","type","payload","setSearchText","event","searchText","target","toggleInSelectedContacts","contactId","selectAllContacts","deSelectAllContacts","openNewContactDialog","closeNewContactDialog","openEditContactDialog","data","closeEditContactDialog","addContact","newContact","contactsApp","push","Promise","all","updateContact","contact","child","update","catch","error","errorCode","code","errorMessage","message","removeContact","remove","removeContacts","contactIds","console","log","batch","element","commit","toggleStarredContact","request","post","response","toggleStarredContacts","setContactsStarred","setContactsUnstarred"],"mappings":"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","sourcesContent":["import { getUserData } from 'app/contacts/store/actions/user.actions';\nimport axios from 'axios';\nimport firebaseService from 'app/services/firebaseService';\nimport _ from '@lodash';\nexport const GET_CONTACTS = '[CONTACTS APP] GET CONTACTS';\nexport const SET_SEARCH_TEXT = '[CONTACTS APP] SET SEARCH TEXT';\nexport const TOGGLE_IN_SELECTED_CONTACTS = '[CONTACTS APP] TOGGLE IN SELECTED CONTACTS';\nexport const SELECT_ALL_CONTACTS = '[CONTACTS APP] SELECT ALL CONTACTS';\nexport const DESELECT_ALL_CONTACTS = '[CONTACTS APP] DESELECT ALL CONTACTS';\nexport const OPEN_NEW_CONTACT_DIALOG = '[CONTACTS APP] OPEN NEW CONTACT DIALOG';\nexport const CLOSE_NEW_CONTACT_DIALOG = '[CONTACTS APP] CLOSE NEW CONTACT DIALOG';\nexport const OPEN_EDIT_CONTACT_DIALOG = '[CONTACTS APP] OPEN EDIT CONTACT DIALOG';\nexport const CLOSE_EDIT_CONTACT_DIALOG = '[CONTACTS APP] CLOSE EDIT CONTACT DIALOG';\nexport const ADD_CONTACT = '[CONTACTS APP] ADD CONTACT';\nexport const UPDATE_CONTACT = '[CONTACTS APP] UPDATE CONTACT';\nexport const REMOVE_CONTACT = '[CONTACTS APP] REMOVE CONTACT';\nexport const REMOVE_CONTACTS = '[CONTACTS APP] REMOVE CONTACTS';\nexport const TOGGLE_STARRED_CONTACT = '[CONTACTS APP] TOGGLE STARRED CONTACT';\nexport const TOGGLE_STARRED_CONTACTS = '[CONTACTS APP] TOGGLE STARRED CONTACTS';\nexport const SET_CONTACTS_STARRED = '[CONTACTS APP] SET CONTACTS STARRED ';\n\nexport function getContacts(routeParams) {\n    return (dispatch, getState) => {\n        firebaseService.db\n            .ref(`contacts`)\n            .once('value')\n            .then(snapshot => {\n                const contacts = snapshot.val();\n                _.forEach(contacts, function(value, key) {\n                    value.id = key;\n                });\n\n                return dispatch({\n                    type: GET_CONTACTS,\n                    payload: contacts,\n                    routeParams\n                })\n\n            });\n    }\n}\n\nexport function setSearchText(event) {\n    return {\n        type: SET_SEARCH_TEXT,\n        searchText: event.target.value\n    };\n}\n\nexport function toggleInSelectedContacts(contactId) {\n    return {\n        type: TOGGLE_IN_SELECTED_CONTACTS,\n        contactId\n    };\n}\n\nexport function selectAllContacts() {\n    return {\n        type: SELECT_ALL_CONTACTS\n    };\n}\n\nexport function deSelectAllContacts() {\n    return {\n        type: DESELECT_ALL_CONTACTS\n    };\n}\n\nexport function openNewContactDialog() {\n    return {\n        type: OPEN_NEW_CONTACT_DIALOG\n    };\n}\n\nexport function closeNewContactDialog() {\n    return {\n        type: CLOSE_NEW_CONTACT_DIALOG\n    };\n}\n\nexport function openEditContactDialog(data) {\n    return {\n        type: OPEN_EDIT_CONTACT_DIALOG,\n        data\n    };\n}\n\nexport function closeEditContactDialog() {\n    return {\n        type: CLOSE_EDIT_CONTACT_DIALOG\n    };\n}\n\nexport function addContact(newContact) {\n    return (dispatch, getState) => {\n        const { routeParams } = getState().contactsApp.contacts;\n        firebaseService.db.ref(`contacts`)\n            .push(newContact)\n            .then(snapshot => {\n                Promise.all([\n                    dispatch({\n                        type: ADD_CONTACT\n                    })\n                ]).then(() => dispatch(getContacts(routeParams)));\n            });\n    };\n}\n\nexport function updateContact(contact) {\n    return (dispatch, getState) => {\n        const { routeParams } = getState().contactsApp.contacts;\n        firebaseService.db.ref('contacts').child(contact.id).update(contact).then(() => {\n            Promise.all([\n                dispatch({\n                    type: ADD_CONTACT\n                })\n            ]).then(() => dispatch(getContacts(routeParams)));\n        }).catch(error => {\n            return {\n                errorCode: error.code,\n                errorMessage: error.message\n            }\n        });\n    };\n}\n\nexport function removeContact(contactId) {\n    return (dispatch, getState) => {\n        const { routeParams } = getState().contactsApp.contacts;\n        const id = contactId;\n        firebaseService.db.ref(`contacts/${id}`).remove().then(() => {\n            Promise.all([\n                dispatch({\n                    type: REMOVE_CONTACT\n                })\n            ]).then(() => dispatch(getContacts(routeParams)));\n        }).catch(error => {\n            return {\n                errorCode: error.code,\n                errorMessage: error.message\n            }\n        });\n\n        // const request = axios.post('/api/contacts-app/remove-contact', {\n        //     contactId\n        // });\n\n        // return request.then(response =>\n        //     Promise.all([\n        //         dispatch({\n        //             type: REMOVE_CONTACT\n        //         })\n        //     ]).then(() => dispatch(getContacts(routeParams)))\n        // );\n    };\n}\n\nexport function removeContacts(contactIds) {\n    return (dispatch, getState) => {\n        const { routeParams } = getState().contactsApp.contacts;\n\n        console.log(contactIds);\n        let batch = db.batch();\n        contactIds.forEach(element => {\n\n            batch.ref(`contacts/${element}`).remove();\n        });\n\n        return batch.commit().then(function() {\n            Promise.all([\n                dispatch({\n                    type: REMOVE_CONTACTS\n                })\n            ]).then(() => dispatch(getContacts(routeParams)));\n        });\n\n        // const id = contactIds;\n\n        // firebaseService.db.ref(`contacts/${id}`).remove().then(() => {\n        //     Promise.all([\n        //         dispatch({\n        //             type: REMOVE_CONTACTS\n        //         })\n        //     ]).then(() => dispatch(getContacts(routeParams)));\n        // }).catch(error => {\n        //     return {\n        //         errorCode: error.code,\n        //         errorMessage: error.message\n        //     }\n        // });\n\n\n\n        // const request = axios.post('/api/contacts-app/remove-contacts', {\n        //     contactIds\n        // });\n\n        // return request.then(response =>\n        //     Promise.all([\n        //         dispatch({\n        //             type: REMOVE_CONTACTS\n        //         }),\n        //         dispatch({\n        //             type: DESELECT_ALL_CONTACTS\n        //         })\n        //     ]).then(() => dispatch(getContacts(routeParams)))\n        // );\n    };\n}\n\nexport function toggleStarredContact(contactId) {\n    return (dispatch, getState) => {\n        const { routeParams } = getState().contactsApp.contacts;\n\n        const request = axios.post('/api/contacts-app/toggle-starred-contact', {\n            contactId\n        });\n\n        return request.then(response =>\n            Promise.all([\n                dispatch({\n                    type: TOGGLE_STARRED_CONTACT\n                }),\n                dispatch(getUserData())\n            ]).then(() => dispatch(getContacts(routeParams)))\n        );\n    };\n}\n\nexport function toggleStarredContacts(contactIds) {\n    return (dispatch, getState) => {\n        const { routeParams } = getState().contactsApp.contacts;\n\n        const request = axios.post('/api/contacts-app/toggle-starred-contacts', {\n            contactIds\n        });\n\n        return request.then(response =>\n            Promise.all([\n                dispatch({\n                    type: TOGGLE_STARRED_CONTACTS\n                }),\n                dispatch({\n                    type: DESELECT_ALL_CONTACTS\n                }),\n                dispatch(getUserData())\n            ]).then(() => dispatch(getContacts(routeParams)))\n        );\n    };\n}\n\nexport function setContactsStarred(contactIds) {\n    return (dispatch, getState) => {\n        const { routeParams } = getState().contactsApp.contacts;\n\n        const request = axios.post('/api/contacts-app/set-contacts-starred', {\n            contactIds\n        });\n\n        return request.then(response =>\n            Promise.all([\n                dispatch({\n                    type: SET_CONTACTS_STARRED\n                }),\n                dispatch({\n                    type: DESELECT_ALL_CONTACTS\n                }),\n                dispatch(getUserData())\n            ]).then(() => dispatch(getContacts(routeParams)))\n        );\n    };\n}\n\nexport function setContactsUnstarred(contactIds) {\n    return (dispatch, getState) => {\n        const { routeParams } = getState().contactsApp.contacts;\n\n        const request = axios.post('/api/contacts-app/set-contacts-unstarred', {\n            contactIds\n        });\n\n        return request.then(response =>\n            Promise.all([\n                dispatch({\n                    type: SET_CONTACTS_STARRED\n                }),\n                dispatch({\n                    type: DESELECT_ALL_CONTACTS\n                }),\n                dispatch(getUserData())\n            ]).then(() => dispatch(getContacts(routeParams)))\n        );\n    };\n}"]},"metadata":{},"sourceType":"module"}