{"ast":null,"code":"import history from '@history';\nimport axios from 'axios';\nimport BoardModel from '../../model/BoardModel';\nimport firebaseService from 'app/services/firebaseService';\nexport var GET_BOARDS = '[SCRUMBOARD APP] GET BOARDS';\nexport var RESET_BOARDS = '[SCRUMBOARD APP] RESET BOARDS';\nexport var NEW_BOARD = '[SCRUMBOARD APP] NEW BOARD';\nexport function getBoards() {\n  var request = axios.get('/api/scrumboard-app/boards');\n  return function (dispatch) {\n    return request.then(function (response) {\n      return dispatch({\n        type: GET_BOARDS,\n        payload: response.data\n      });\n    });\n  };\n}\nexport function resetBoards() {\n  return {\n    type: RESET_BOARDS\n  };\n}\nexport function newBoard(board) {\n  var b = {\n    board: board || new BoardModel()\n  };\n  firebaseService.db.ref(\"board\").push(b).then(function (snapshot) {\n    console.log(snapshot); // Promise.all([\n    //     dispatch({\n    //         type: NEW_BOARD\n    //     })\n    // ]).then(() => dispatch(getContacts(routeParams)));\n  }); // const request = axios.post('/api/scrumboard-app/board/new', {\n  // \tboard: board || new BoardModel()\n  // });\n  // return dispatch =>\n  // \trequest.then(response => {\n  // \t\tconst _board = response.data;\n  // \t\thistory.push({\n  // \t\t\tpathname: `/scrumboard/boards/${_board.id}/${_board.handle}`\n  // \t\t});\n  // \t\treturn dispatch({\n  // \t\t\ttype: NEW_BOARD,\n  // \t\t\tboard: _board\n  // \t\t});\n  // \t});\n}","map":{"version":3,"sources":["/Users/msumaran/Documents/Proyectos/masternativos/src/app/scrumboard/store/actions/boards.actions.js"],"names":["history","axios","BoardModel","firebaseService","GET_BOARDS","RESET_BOARDS","NEW_BOARD","getBoards","request","get","dispatch","then","response","type","payload","data","resetBoards","newBoard","board","b","db","ref","push","snapshot","console","log"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAO,IAAMC,UAAU,GAAG,6BAAnB;AACP,OAAO,IAAMC,YAAY,GAAG,+BAArB;AACP,OAAO,IAAMC,SAAS,GAAG,4BAAlB;AAEP,OAAO,SAASC,SAAT,GAAqB;AAC3B,MAAMC,OAAO,GAAGP,KAAK,CAACQ,GAAN,CAAU,4BAAV,CAAhB;AAEA,SAAO,UAAAC,QAAQ;AAAA,WACdF,OAAO,CAACG,IAAR,CAAa,UAAAC,QAAQ;AAAA,aACpBF,QAAQ,CAAC;AACRG,QAAAA,IAAI,EAAET,UADE;AAERU,QAAAA,OAAO,EAAEF,QAAQ,CAACG;AAFV,OAAD,CADY;AAAA,KAArB,CADc;AAAA,GAAf;AAOA;AAED,OAAO,SAASC,WAAT,GAAuB;AAC7B,SAAO;AACNH,IAAAA,IAAI,EAAER;AADA,GAAP;AAGA;AAED,OAAO,SAASY,QAAT,CAAkBC,KAAlB,EAAyB;AAC/B,MAAIC,CAAC,GAAG;AAAED,IAAAA,KAAK,EAAEA,KAAK,IAAI,IAAIhB,UAAJ;AAAlB,GAAR;AACAC,EAAAA,eAAe,CAACiB,EAAhB,CAAmBC,GAAnB,UACYC,IADZ,CACiBH,CADjB,EAEYR,IAFZ,CAEiB,UAAAY,QAAQ,EAAI;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ,EADiB,CAEd;AACA;AACA;AACA;AACA;AACH,GATZ,EAF+B,CAc/B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import history from '@history';\nimport axios from 'axios';\nimport BoardModel from '../../model/BoardModel';\nimport firebaseService from 'app/services/firebaseService';\nexport const GET_BOARDS = '[SCRUMBOARD APP] GET BOARDS';\nexport const RESET_BOARDS = '[SCRUMBOARD APP] RESET BOARDS';\nexport const NEW_BOARD = '[SCRUMBOARD APP] NEW BOARD';\n\nexport function getBoards() {\n\tconst request = axios.get('/api/scrumboard-app/boards');\n\n\treturn dispatch =>\n\t\trequest.then(response =>\n\t\t\tdispatch({\n\t\t\t\ttype: GET_BOARDS,\n\t\t\t\tpayload: response.data\n\t\t\t})\n\t\t);\n}\n\nexport function resetBoards() {\n\treturn {\n\t\ttype: RESET_BOARDS\n\t};\n}\n\nexport function newBoard(board) {\n\tlet b = { board: board || new BoardModel() };\n\tfirebaseService.db.ref(`board`)\n            .push(b)\n            .then(snapshot => {\n            \tconsole.log(snapshot);\n                // Promise.all([\n                //     dispatch({\n                //         type: NEW_BOARD\n                //     })\n                // ]).then(() => dispatch(getContacts(routeParams)));\n            });\n\n\n\t// const request = axios.post('/api/scrumboard-app/board/new', {\n\t// \tboard: board || new BoardModel()\n\t// });\n\n\t// return dispatch =>\n\t// \trequest.then(response => {\n\t// \t\tconst _board = response.data;\n\t// \t\thistory.push({\n\t// \t\t\tpathname: `/scrumboard/boards/${_board.id}/${_board.handle}`\n\t// \t\t});\n\t// \t\treturn dispatch({\n\t// \t\t\ttype: NEW_BOARD,\n\t// \t\t\tboard: _board\n\t// \t\t});\n\t// \t});\n}\n"]},"metadata":{},"sourceType":"module"}